{"version":3,"file":"static/js/90.5480d177.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/set.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/@supabase/realtime-js/src/lib/constants.ts","../node_modules/@supabase/functions-js/src/types.ts","../node_modules/@supabase/functions-js/src/FunctionsClient.ts","../node_modules/@supabase/functions-js/src/helper.ts","../node_modules/@supabase/postgrest-js/src/PostgrestBuilder.ts","../node_modules/@supabase/postgrest-js/src/PostgrestTransformBuilder.ts","../node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts","../node_modules/@supabase/postgrest-js/src/PostgrestQueryBuilder.ts","../node_modules/@supabase/postgrest-js/src/constants.ts","../node_modules/@supabase/postgrest-js/src/version.ts","../node_modules/@supabase/postgrest-js/src/PostgrestClient.ts","../node_modules/@supabase/realtime-js/src/lib/version.ts","../node_modules/@supabase/realtime-js/src/lib/timer.ts","../node_modules/@supabase/realtime-js/src/RealtimePresence.ts","../node_modules/@supabase/realtime-js/src/lib/serializer.ts","../node_modules/@supabase/realtime-js/src/lib/push.ts","../node_modules/@supabase/realtime-js/src/lib/transformers.ts","../node_modules/@supabase/realtime-js/src/RealtimeChannel.ts","../node_modules/@supabase/realtime-js/src/RealtimeClient.ts","../node_modules/@supabase/storage-js/src/lib/errors.ts","../node_modules/@supabase/storage-js/src/lib/helpers.ts","../node_modules/@supabase/storage-js/src/lib/fetch.ts","../node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts","../node_modules/@supabase/storage-js/src/lib/constants.ts","../node_modules/@supabase/storage-js/src/lib/version.ts","../node_modules/@supabase/storage-js/src/packages/StorageBucketApi.ts","../node_modules/@supabase/storage-js/src/StorageClient.ts","../node_modules/@supabase/supabase-js/src/lib/constants.ts","../node_modules/@supabase/supabase-js/src/lib/version.ts","../node_modules/@supabase/supabase-js/src/lib/fetch.ts","../node_modules/@supabase/gotrue-js/src/lib/helpers.ts","../node_modules/@supabase/gotrue-js/src/lib/errors.ts","../node_modules/@supabase/gotrue-js/src/lib/fetch.ts","../node_modules/@supabase/gotrue-js/src/GoTrueAdminApi.ts","../node_modules/@supabase/gotrue-js/src/lib/constants.ts","../node_modules/@supabase/gotrue-js/src/lib/version.ts","../node_modules/@supabase/gotrue-js/src/lib/local-storage.ts","../node_modules/@supabase/gotrue-js/src/lib/polyfills.ts","../node_modules/@supabase/gotrue-js/src/GoTrueClient.ts","../node_modules/@supabase/supabase-js/src/lib/SupabaseAuthClient.ts","../node_modules/@supabase/supabase-js/src/SupabaseClient.ts","../node_modules/@supabase/supabase-js/src/lib/helpers.ts","../node_modules/@supabase/supabase-js/src/index.ts","../node_modules/cross-fetch/dist/browser-ponyfill.js","../node_modules/es5-ext/global.js","../node_modules/websocket/lib/browser.js","../node_modules/websocket/lib/version.js"],"sourcesContent":["import superPropBase from \"./superPropBase.js\";\nimport defineProperty from \"./defineProperty.js\";\nfunction set(target, property, value, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.set) {\n    set = Reflect.set;\n  } else {\n    set = function set(target, property, value, receiver) {\n      var base = superPropBase(target, property);\n      var desc;\n      if (base) {\n        desc = Object.getOwnPropertyDescriptor(base, property);\n        if (desc.set) {\n          desc.set.call(receiver, value);\n          return true;\n        } else if (!desc.writable) {\n          return false;\n        }\n      }\n      desc = Object.getOwnPropertyDescriptor(receiver, property);\n      if (desc) {\n        if (!desc.writable) {\n          return false;\n        }\n        desc.value = value;\n        Object.defineProperty(receiver, property, desc);\n      } else {\n        defineProperty(receiver, property, value);\n      }\n      return true;\n    };\n  }\n  return set(target, property, value, receiver);\n}\nexport default function _set(target, property, value, receiver, isStrict) {\n  var s = set(target, property, value, receiver || target);\n  if (!s && isStrict) {\n    throw new TypeError('failed to set property');\n  }\n  return value;\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","import { version } from './version'\n\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `realtime-js/${version}` }\n\nexport const VSN: string = '1.0.0'\n\nexport const DEFAULT_TIMEOUT = 10000\n\nexport const WS_CLOSE_NORMAL = 1000\n\nexport enum SOCKET_STATES {\n  connecting = 0,\n  open = 1,\n  closing = 2,\n  closed = 3,\n}\n\nexport enum CHANNEL_STATES {\n  closed = 'closed',\n  errored = 'errored',\n  joined = 'joined',\n  joining = 'joining',\n  leaving = 'leaving',\n}\n\nexport enum CHANNEL_EVENTS {\n  close = 'phx_close',\n  error = 'phx_error',\n  join = 'phx_join',\n  reply = 'phx_reply',\n  leave = 'phx_leave',\n  access_token = 'access_token',\n}\n\nexport enum TRANSPORTS {\n  websocket = 'websocket',\n}\n\nexport enum CONNECTION_STATE {\n  Connecting = 'connecting',\n  Open = 'open',\n  Closing = 'closing',\n  Closed = 'closed',\n}\n","export type Fetch = typeof fetch\n\n/**\n * Response format\n *\n */\nexport interface FunctionsResponseSuccess<T> {\n  data: T\n  error: null\n}\nexport interface FunctionsResponseFailure {\n  data: null\n  error: any\n}\nexport type FunctionsResponse<T> = FunctionsResponseSuccess<T> | FunctionsResponseFailure\n\nexport class FunctionsError extends Error {\n  context: any\n  constructor(message: string, name = 'FunctionsError', context?: any) {\n    super(message)\n    super.name = name\n    this.context = context\n  }\n}\n\nexport class FunctionsFetchError extends FunctionsError {\n  constructor(context: any) {\n    super('Failed to send a request to the Edge Function', 'FunctionsFetchError', context)\n  }\n}\n\nexport class FunctionsRelayError extends FunctionsError {\n  constructor(context: any) {\n    super('Relay Error invoking the Edge Function', 'FunctionsRelayError', context)\n  }\n}\n\nexport class FunctionsHttpError extends FunctionsError {\n  constructor(context: any) {\n    super('Edge Function returned a non-2xx status code', 'FunctionsHttpError', context)\n  }\n}\n\nexport type FunctionInvokeOptions = {\n  /**\n   * Object representing the headers to send with the request.\n   * */\n  headers?: { [key: string]: string }\n  /**\n   * The HTTP verb of the request\n   */\n  method?: 'POST' | 'GET' | 'PUT' | 'PATCH' | 'DELETE'\n  /**\n   * The body of the request.\n   */\n  body?:\n    | File\n    | Blob\n    | ArrayBuffer\n    | FormData\n    | ReadableStream<Uint8Array>\n    | Record<string, any>\n    | string\n}\n","import { resolveFetch } from './helper'\nimport {\n  Fetch,\n  FunctionsFetchError,\n  FunctionsHttpError,\n  FunctionsRelayError,\n  FunctionsResponse,\n  FunctionInvokeOptions,\n} from './types'\n\nexport class FunctionsClient {\n  protected url: string\n  protected headers: Record<string, string>\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      customFetch,\n    }: {\n      headers?: Record<string, string>\n      customFetch?: Fetch\n    } = {}\n  ) {\n    this.url = url\n    this.headers = headers\n    this.fetch = resolveFetch(customFetch)\n  }\n\n  /**\n   * Updates the authorization header\n   * @param token - the new jwt token sent in the authorisation header\n   */\n  setAuth(token: string) {\n    this.headers.Authorization = `Bearer ${token}`\n  }\n\n  /**\n   * Invokes a function\n   * @param functionName - The name of the Function to invoke.\n   * @param options - Options for invoking the Function.\n   */\n  async invoke<T = any>(\n    functionName: string,\n    options: FunctionInvokeOptions = {}\n  ): Promise<FunctionsResponse<T>> {\n    try {\n      const { headers, method, body: functionArgs } = options\n\n      let _headers: Record<string, string> = {}\n      let body: any\n      if (\n        functionArgs &&\n        ((headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type')) || !headers)\n      ) {\n        if (\n          (typeof Blob !== 'undefined' && functionArgs instanceof Blob) ||\n          functionArgs instanceof ArrayBuffer\n        ) {\n          // will work for File as File inherits Blob\n          // also works for ArrayBuffer as it is the same underlying structure as a Blob\n          _headers['Content-Type'] = 'application/octet-stream'\n          body = functionArgs\n        } else if (typeof functionArgs === 'string') {\n          // plain string\n          _headers['Content-Type'] = 'text/plain'\n          body = functionArgs\n        } else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\n          // don't set content-type headers\n          // Request will automatically add the right boundary value\n          body = functionArgs\n        } else {\n          // default, assume this is JSON\n          _headers['Content-Type'] = 'application/json'\n          body = JSON.stringify(functionArgs)\n        }\n      }\n\n      const response = await this.fetch(`${this.url}/${functionName}`, {\n        method: method || 'POST',\n        // headers priority is (high to low):\n        // 1. invoke-level headers\n        // 2. client-level headers\n        // 3. default Content-Type header\n        headers: { ..._headers, ...this.headers, ...headers },\n        body,\n      }).catch((fetchError) => {\n        throw new FunctionsFetchError(fetchError)\n      })\n\n      const isRelayError = response.headers.get('x-relay-error')\n      if (isRelayError && isRelayError === 'true') {\n        throw new FunctionsRelayError(response)\n      }\n\n      if (!response.ok) {\n        throw new FunctionsHttpError(response)\n      }\n\n      let responseType = (response.headers.get('Content-Type') ?? 'text/plain').split(';')[0].trim()\n      let data: any\n      if (responseType === 'application/json') {\n        data = await response.json()\n      } else if (responseType === 'application/octet-stream') {\n        data = await response.blob()\n      } else if (responseType === 'multipart/form-data') {\n        data = await response.formData()\n      } else {\n        // default to text\n        data = await response.text()\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n}\n","import { Fetch } from './types'\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n","import crossFetch from 'cross-fetch'\n\nimport type { Fetch, PostgrestSingleResponse } from './types'\n\nexport default abstract class PostgrestBuilder<Result>\n  implements PromiseLike<PostgrestSingleResponse<Result>>\n{\n  protected method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n  protected url: URL\n  protected headers: Record<string, string>\n  protected schema?: string\n  protected body?: unknown\n  protected shouldThrowOnError = false\n  protected signal?: AbortSignal\n  protected fetch: Fetch\n  protected isMaybeSingle: boolean\n\n  constructor(builder: PostgrestBuilder<Result>) {\n    this.method = builder.method\n    this.url = builder.url\n    this.headers = builder.headers\n    this.schema = builder.schema\n    this.body = builder.body\n    this.shouldThrowOnError = builder.shouldThrowOnError\n    this.signal = builder.signal\n    this.isMaybeSingle = builder.isMaybeSingle\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = crossFetch\n    } else {\n      this.fetch = fetch\n    }\n  }\n\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(): this {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  then<TResult1 = PostgrestSingleResponse<Result>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: PostgrestSingleResponse<Result>) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema\n    } else {\n      this.headers['Content-Profile'] = this.schema\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json'\n    }\n\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n    const _fetch = this.fetch\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal,\n    }).then(async (res) => {\n      let error = null\n      let data = null\n      let count: number | null = null\n      let status = res.status\n      let statusText = res.statusText\n\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = await res.text()\n          if (body === '') {\n            // Prefer: return=minimal\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = body\n          } else if (\n            this.headers['Accept'] &&\n            this.headers['Accept'].includes('application/vnd.pgrst.plan+text')\n          ) {\n            data = body\n          } else {\n            data = JSON.parse(body)\n          }\n        }\n\n        const countHeader = this.headers['Prefer']?.match(/count=(exact|planned|estimated)/)\n        const contentRange = res.headers.get('content-range')?.split('/')\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1])\n        }\n\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n          if (data.length > 1) {\n            error = {\n              // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n              code: 'PGRST116',\n              details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n              hint: null,\n              message: 'JSON object requested, multiple (or no) rows returned',\n            }\n            data = null\n            count = null\n            status = 406\n            statusText = 'Not Acceptable'\n          } else if (data.length === 1) {\n            data = data[0]\n          } else {\n            data = null\n          }\n        }\n      } else {\n        const body = await res.text()\n\n        try {\n          error = JSON.parse(body)\n\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (Array.isArray(error) && res.status === 404) {\n            data = []\n            error = null\n            status = 200\n            statusText = 'OK'\n          }\n        } catch {\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (res.status === 404 && body === '') {\n            status = 204\n            statusText = 'No Content'\n          } else {\n            error = {\n              message: body,\n            }\n          }\n        }\n\n        if (error && this.isMaybeSingle && error?.details?.includes('Results contain 0 rows')) {\n          error = null\n          status = 200\n          statusText = 'OK'\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw error\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText,\n      }\n\n      return postgrestResponse\n    })\n    if (!this.shouldThrowOnError) {\n      res = res.catch((fetchError) => ({\n        error: {\n          message: `${fetchError?.name ?? 'FetchError'}: ${fetchError?.message}`,\n          details: `${fetchError?.stack ?? ''}`,\n          hint: '',\n          code: `${fetchError?.code ?? ''}`,\n        },\n        data: null,\n        count: null,\n        status: 0,\n        statusText: '',\n      }))\n    }\n\n    return res.then(onfulfilled, onrejected)\n  }\n}\n","import PostgrestBuilder from './PostgrestBuilder'\nimport { GetResult } from './select-query-parser'\nimport { GenericSchema } from './types'\n\nexport default class PostgrestTransformBuilder<\n  Schema extends GenericSchema,\n  Row extends Record<string, unknown>,\n  Result,\n  Relationships = unknown\n> extends PostgrestBuilder<Result> {\n  /**\n   * Perform a SELECT on the query result.\n   *\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n   * return modified rows. By calling this method, modified rows are returned in\n   * `data`.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   */\n  select<Query extends string = '*', NewResultOne = GetResult<Schema, Row, Relationships, Query>>(\n    columns?: Query\n  ): PostgrestTransformBuilder<Schema, Row, NewResultOne[], Relationships> {\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = (columns ?? '*')\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (this.headers['Prefer']) {\n      this.headers['Prefer'] += ','\n    }\n    this.headers['Prefer'] += 'return=representation'\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResultOne[], Relationships>\n  }\n\n  order<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: undefined }\n  ): this\n  order(\n    column: string,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable: string }\n  ): this\n  /**\n   * Order the query result by `column`.\n   *\n   * You can call this method multiple times to order by multiple columns.\n   *\n   * You can order foreign tables, but it doesn't affect the ordering of the\n   * current table.\n   *\n   * @param column - The column to order by\n   * @param options - Named parameters\n   * @param options.ascending - If `true`, the result will be in ascending order\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n   * `null`s appear last.\n   * @param options.foreignTable - Set this to order a foreign table by foreign\n   * columns\n   */\n  order(\n    column: string,\n    {\n      ascending = true,\n      nullsFirst,\n      foreignTable,\n    }: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string } = {}\n  ): this {\n    const key = foreignTable ? `${foreignTable}.order` : 'order'\n    const existingOrder = this.url.searchParams.get(key)\n\n    this.url.searchParams.set(\n      key,\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${\n        nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'\n      }`\n    )\n    return this\n  }\n\n  /**\n   * Limit the query result by `count`.\n   *\n   * @param count - The maximum number of rows to return\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n  limit(count: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(key, `${count}`)\n    return this\n  }\n\n  /**\n   * Limit the query result by `from` and `to` inclusively.\n   *\n   * @param from - The starting index from which to limit the result\n   * @param to - The last index to which to limit the result\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n  range(from: number, to: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(keyOffset, `${from}`)\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\n    return this\n  }\n\n  /**\n   * Set the AbortSignal for the fetch request.\n   *\n   * @param signal - The AbortSignal to use for the fetch request\n   */\n  abortSignal(signal: AbortSignal): this {\n    this.signal = signal\n    return this\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n   * returns an error.\n   */\n  single<\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\n  >(): PostgrestBuilder<ResultOne> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    return this as PostgrestBuilder<ResultOne>\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n   * this returns an error.\n   */\n  maybeSingle<\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\n  >(): PostgrestBuilder<ResultOne | null> {\n    // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n    // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n    if (this.method === 'GET') {\n      this.headers['Accept'] = 'application/json'\n    } else {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    }\n    this.isMaybeSingle = true\n    return this as PostgrestBuilder<ResultOne | null>\n  }\n\n  /**\n   * Return `data` as a string in CSV format.\n   */\n  csv(): PostgrestBuilder<string> {\n    this.headers['Accept'] = 'text/csv'\n    return this as PostgrestBuilder<string>\n  }\n\n  /**\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n   */\n  geojson(): PostgrestBuilder<Record<string, unknown>> {\n    this.headers['Accept'] = 'application/geo+json'\n    return this as PostgrestBuilder<Record<string, unknown>>\n  }\n\n  /**\n   * Return `data` as the EXPLAIN plan for the query.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.analyze - If `true`, the query will be executed and the\n   * actual run time will be returned\n   *\n   * @param options.verbose - If `true`, the query identifier will be returned\n   * and `data` will include the output columns of the query\n   *\n   * @param options.settings - If `true`, include information on configuration\n   * parameters that affect query planning\n   *\n   * @param options.buffers - If `true`, include information on buffer usage\n   *\n   * @param options.wal - If `true`, include information on WAL record generation\n   *\n   * @param options.format - The format of the output, can be `\"text\"` (default)\n   * or `\"json\"`\n   */\n  explain({\n    analyze = false,\n    verbose = false,\n    settings = false,\n    buffers = false,\n    wal = false,\n    format = 'text',\n  }: {\n    analyze?: boolean\n    verbose?: boolean\n    settings?: boolean\n    buffers?: boolean\n    wal?: boolean\n    format?: 'json' | 'text'\n  } = {}): PostgrestBuilder<Record<string, unknown>[]> | PostgrestBuilder<string> {\n    const options = [\n      analyze ? 'analyze' : null,\n      verbose ? 'verbose' : null,\n      settings ? 'settings' : null,\n      buffers ? 'buffers' : null,\n      wal ? 'wal' : null,\n    ]\n      .filter(Boolean)\n      .join('|')\n    // An Accept header can carry multiple media types but postgrest-js always sends one\n    const forMediatype = this.headers['Accept']\n    this.headers[\n      'Accept'\n    ] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`\n    if (format === 'json') return this as PostgrestBuilder<Record<string, unknown>[]>\n    else return this as PostgrestBuilder<string>\n  }\n\n  /**\n   * Rollback the query.\n   *\n   * `data` will still be returned, but the query is not committed.\n   */\n  rollback(): this {\n    if ((this.headers['Prefer'] ?? '').trim().length > 0) {\n      this.headers['Prefer'] += ',tx=rollback'\n    } else {\n      this.headers['Prefer'] = 'tx=rollback'\n    }\n    return this\n  }\n\n  /**\n   * Override the type of the returned `data`.\n   *\n   * @typeParam NewResult - The new result type to override with\n   */\n  returns<NewResult>(): PostgrestTransformBuilder<Schema, Row, NewResult, Relationships> {\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResult, Relationships>\n  }\n}\n","import PostgrestTransformBuilder from './PostgrestTransformBuilder'\nimport { GenericSchema } from './types'\n\ntype FilterOperator =\n  | 'eq'\n  | 'neq'\n  | 'gt'\n  | 'gte'\n  | 'lt'\n  | 'lte'\n  | 'like'\n  | 'ilike'\n  | 'is'\n  | 'in'\n  | 'cs'\n  | 'cd'\n  | 'sl'\n  | 'sr'\n  | 'nxl'\n  | 'nxr'\n  | 'adj'\n  | 'ov'\n  | 'fts'\n  | 'plfts'\n  | 'phfts'\n  | 'wfts'\n\nexport default class PostgrestFilterBuilder<\n  Schema extends GenericSchema,\n  Row extends Record<string, unknown>,\n  Result,\n  Relationships = unknown\n> extends PostgrestTransformBuilder<Schema, Row, Result, Relationships> {\n  eq<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  eq(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is equal to `value`.\n   *\n   * To check if the value of `column` is NULL, you should use `.is()` instead.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  eq(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `eq.${value}`)\n    return this\n  }\n\n  neq<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  neq(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is not equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  neq(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `neq.${value}`)\n    return this\n  }\n\n  gt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  gt(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is greater than `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  gt(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `gt.${value}`)\n    return this\n  }\n\n  gte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  gte(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is greater than or equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  gte(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `gte.${value}`)\n    return this\n  }\n\n  lt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  lt(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is less than `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  lt(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `lt.${value}`)\n    return this\n  }\n\n  lte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  lte(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is less than or equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  lte(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `lte.${value}`)\n    return this\n  }\n\n  like<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\n  like(column: string, pattern: string): this\n  /**\n   * Match only rows where `column` matches `pattern` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param pattern - The pattern to match with\n   */\n  like(column: string, pattern: string): this {\n    this.url.searchParams.append(column, `like.${pattern}`)\n    return this\n  }\n\n  likeAllOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: string[]): this\n  likeAllOf(column: string, patterns: string[]): this\n  /**\n   * Match only rows where `column` matches all of `patterns` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n  likeAllOf(column: string, patterns: string[]): this {\n    this.url.searchParams.append(column, `like(all).{${patterns.join(',')}}`)\n    return this\n  }\n\n  likeAnyOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: string[]): this\n  likeAnyOf(column: string, patterns: string[]): this\n  /**\n   * Match only rows where `column` matches any of `patterns` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n  likeAnyOf(column: string, patterns: string[]): this {\n    this.url.searchParams.append(column, `like(any).{${patterns.join(',')}}`)\n    return this\n  }\n\n  ilike<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\n  ilike(column: string, pattern: string): this\n  /**\n   * Match only rows where `column` matches `pattern` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param pattern - The pattern to match with\n   */\n  ilike(column: string, pattern: string): this {\n    this.url.searchParams.append(column, `ilike.${pattern}`)\n    return this\n  }\n\n  ilikeAllOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: string[]): this\n  ilikeAllOf(column: string, patterns: string[]): this\n  /**\n   * Match only rows where `column` matches all of `patterns` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n  ilikeAllOf(column: string, patterns: string[]): this {\n    this.url.searchParams.append(column, `ilike(all).{${patterns.join(',')}}`)\n    return this\n  }\n\n  ilikeAnyOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: string[]): this\n  ilikeAnyOf(column: string, patterns: string[]): this\n  /**\n   * Match only rows where `column` matches any of `patterns` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n  ilikeAnyOf(column: string, patterns: string[]): this {\n    this.url.searchParams.append(column, `ilike(any).{${patterns.join(',')}}`)\n    return this\n  }\n\n  is<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: Row[ColumnName] & (boolean | null)\n  ): this\n  is(column: string, value: boolean | null): this\n  /**\n   * Match only rows where `column` IS `value`.\n   *\n   * For non-boolean columns, this is only relevant for checking if the value of\n   * `column` is NULL by setting `value` to `null`.\n   *\n   * For boolean columns, you can also set `value` to `true` or `false` and it\n   * will behave the same way as `.eq()`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  is(column: string, value: boolean | null): this {\n    this.url.searchParams.append(column, `is.${value}`)\n    return this\n  }\n\n  in<ColumnName extends string & keyof Row>(column: ColumnName, values: Row[ColumnName][]): this\n  in(column: string, values: unknown[]): this\n  /**\n   * Match only rows where `column` is included in the `values` array.\n   *\n   * @param column - The column to filter on\n   * @param values - The values array to filter with\n   */\n  in(column: string, values: unknown[]): this {\n    const cleanedValues = values\n      .map((s) => {\n        // handle postgrest reserved characters\n        // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n        if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`\n        else return `${s}`\n      })\n      .join(',')\n    this.url.searchParams.append(column, `in.(${cleanedValues})`)\n    return this\n  }\n\n  contains<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: string | Row[ColumnName][] | Record<string, unknown>\n  ): this\n  contains(column: string, value: string | unknown[] | Record<string, unknown>): this\n  /**\n   * Only relevant for jsonb, array, and range columns. Match only rows where\n   * `column` contains every element appearing in `value`.\n   *\n   * @param column - The jsonb, array, or range column to filter on\n   * @param value - The jsonb, array, or range value to filter with\n   */\n  contains(column: string, value: string | unknown[] | Record<string, unknown>): this {\n    if (typeof value === 'string') {\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n      // keep it simple and accept a string\n      this.url.searchParams.append(column, `cs.${value}`)\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cs.{${value.join(',')}}`)\n    } else {\n      // json\n      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`)\n    }\n    return this\n  }\n\n  containedBy<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: string | Row[ColumnName][] | Record<string, unknown>\n  ): this\n  containedBy(column: string, value: string | unknown[] | Record<string, unknown>): this\n  /**\n   * Only relevant for jsonb, array, and range columns. Match only rows where\n   * every element appearing in `column` is contained by `value`.\n   *\n   * @param column - The jsonb, array, or range column to filter on\n   * @param value - The jsonb, array, or range value to filter with\n   */\n  containedBy(column: string, value: string | unknown[] | Record<string, unknown>): this {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `cd.${value}`)\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cd.{${value.join(',')}}`)\n    } else {\n      // json\n      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`)\n    }\n    return this\n  }\n\n  rangeGt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeGt(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is greater than any element in `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeGt(column: string, range: string): this {\n    this.url.searchParams.append(column, `sr.${range}`)\n    return this\n  }\n\n  rangeGte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeGte(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is either contained in `range` or greater than any element in\n   * `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeGte(column: string, range: string): this {\n    this.url.searchParams.append(column, `nxl.${range}`)\n    return this\n  }\n\n  rangeLt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeLt(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is less than any element in `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeLt(column: string, range: string): this {\n    this.url.searchParams.append(column, `sl.${range}`)\n    return this\n  }\n\n  rangeLte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeLte(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is either contained in `range` or less than any element in\n   * `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeLte(column: string, range: string): this {\n    this.url.searchParams.append(column, `nxr.${range}`)\n    return this\n  }\n\n  rangeAdjacent<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeAdjacent(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where `column` is\n   * mutually exclusive to `range` and there can be no element between the two\n   * ranges.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeAdjacent(column: string, range: string): this {\n    this.url.searchParams.append(column, `adj.${range}`)\n    return this\n  }\n\n  overlaps<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: string | Row[ColumnName][]\n  ): this\n  overlaps(column: string, value: string | unknown[]): this\n  /**\n   * Only relevant for array and range columns. Match only rows where\n   * `column` and `value` have an element in common.\n   *\n   * @param column - The array or range column to filter on\n   * @param value - The array or range value to filter with\n   */\n  overlaps(column: string, value: string | unknown[]): this {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `ov.${value}`)\n    } else {\n      // array\n      this.url.searchParams.append(column, `ov.{${value.join(',')}}`)\n    }\n    return this\n  }\n\n  textSearch<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    query: string,\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\n  ): this\n  textSearch(\n    column: string,\n    query: string,\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\n  ): this\n  /**\n   * Only relevant for text and tsvector columns. Match only rows where\n   * `column` matches the query string in `query`.\n   *\n   * @param column - The text or tsvector column to filter on\n   * @param query - The query text to match with\n   * @param options - Named parameters\n   * @param options.config - The text search configuration to use\n   * @param options.type - Change how the `query` text is interpreted\n   */\n  textSearch(\n    column: string,\n    query: string,\n    { config, type }: { config?: string; type?: 'plain' | 'phrase' | 'websearch' } = {}\n  ): this {\n    let typePart = ''\n    if (type === 'plain') {\n      typePart = 'pl'\n    } else if (type === 'phrase') {\n      typePart = 'ph'\n    } else if (type === 'websearch') {\n      typePart = 'w'\n    }\n    const configPart = config === undefined ? '' : `(${config})`\n    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`)\n    return this\n  }\n\n  match<ColumnName extends string & keyof Row>(query: Record<ColumnName, Row[ColumnName]>): this\n  match(query: Record<string, unknown>): this\n  /**\n   * Match only rows where each column in `query` keys is equal to its\n   * associated value. Shorthand for multiple `.eq()`s.\n   *\n   * @param query - The object to filter with, with column names as keys mapped\n   * to their filter values\n   */\n  match(query: Record<string, unknown>): this {\n    Object.entries(query).forEach(([column, value]) => {\n      this.url.searchParams.append(column, `eq.${value}`)\n    })\n    return this\n  }\n\n  not<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    operator: FilterOperator,\n    value: Row[ColumnName]\n  ): this\n  not(column: string, operator: string, value: unknown): this\n  /**\n   * Match only rows which doesn't satisfy the filter.\n   *\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\n   * follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure they are properly sanitized.\n   *\n   * @param column - The column to filter on\n   * @param operator - The operator to be negated to filter with, following\n   * PostgREST syntax\n   * @param value - The value to filter with, following PostgREST syntax\n   */\n  not(column: string, operator: string, value: unknown): this {\n    this.url.searchParams.append(column, `not.${operator}.${value}`)\n    return this\n  }\n\n  /**\n   * Match only rows which satisfy at least one of the filters.\n   *\n   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure it's properly sanitized.\n   *\n   * It's currently not possible to do an `.or()` filter across multiple tables.\n   *\n   * @param filters - The filters to use, following PostgREST syntax\n   * @param foreignTable - Set this to filter on foreign tables instead of the\n   * current table\n   */\n  or(filters: string, { foreignTable }: { foreignTable?: string } = {}): this {\n    const key = foreignTable ? `${foreignTable}.or` : 'or'\n    this.url.searchParams.append(key, `(${filters})`)\n    return this\n  }\n\n  filter<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    operator: `${'' | 'not.'}${FilterOperator}`,\n    value: unknown\n  ): this\n  filter(column: string, operator: string, value: unknown): this\n  /**\n   * Match only rows which satisfy the filter. This is an escape hatch - you\n   * should use the specific filter methods wherever possible.\n   *\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\n   * follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure they are properly sanitized.\n   *\n   * @param column - The column to filter on\n   * @param operator - The operator to filter with, following PostgREST syntax\n   * @param value - The value to filter with, following PostgREST syntax\n   */\n  filter(column: string, operator: string, value: unknown): this {\n    this.url.searchParams.append(column, `${operator}.${value}`)\n    return this\n  }\n}\n","import PostgrestBuilder from './PostgrestBuilder'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\nimport { GetResult } from './select-query-parser'\nimport { Fetch, GenericSchema, GenericTable, GenericView } from './types'\n\nexport default class PostgrestQueryBuilder<\n  Schema extends GenericSchema,\n  Relation extends GenericTable | GenericView,\n  Relationships = Relation extends { Relationships: infer R } ? R : unknown\n> {\n  url: URL\n  headers: Record<string, string>\n  schema?: string\n  signal?: AbortSignal\n  fetch?: Fetch\n\n  constructor(\n    url: URL,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: {\n      headers?: Record<string, string>\n      schema?: string\n      fetch?: Fetch\n    }\n  ) {\n    this.url = url\n    this.headers = headers\n    this.schema = schema\n    this.fetch = fetch\n  }\n\n  /**\n   * Perform a SELECT query on the table or view.\n   *\n   * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n   *\n   * @param options - Named parameters\n   *\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   *\n   * @param options.count - Count algorithm to use to count rows in the table or view.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  select<\n    Query extends string = '*',\n    ResultOne = GetResult<Schema, Relation['Row'], Relationships, Query>\n  >(\n    columns?: Query,\n    {\n      head = false,\n      count,\n    }: {\n      head?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], ResultOne[], Relationships> {\n    const method = head ? 'HEAD' : 'GET'\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = (columns ?? '*')\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<ResultOne[]>)\n  }\n\n  /**\n   * Perform an INSERT into the table or view.\n   *\n   * By default, inserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to insert. Pass an object to insert a single row\n   * or an array to insert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count inserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   *\n   * @param options.defaultToNull - Make missing fields default to `null`.\n   * Otherwise, use the default value for the column.\n   */\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row | Row[],\n    {\n      count,\n      defaultToNull = true,\n    }: {\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, Relationships> {\n    const method = 'POST'\n\n    const prefersHeaders = []\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer'])\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (!defaultToNull) {\n      prefersHeaders.push('missing=default')\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n\n  /**\n   * Perform an UPSERT on the table or view. Depending on the column(s) passed\n   * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n   * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n   * exist, or if it does exist, perform an alternative action depending on\n   * `ignoreDuplicates`.\n   *\n   * By default, upserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to upsert with. Pass an object to upsert a\n   * single row or an array to upsert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n   * duplicate rows are determined. Two rows are duplicates if all the\n   * `onConflict` columns are equal.\n   *\n   * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n   * `false`, duplicate rows are merged with existing rows.\n   *\n   * @param options.count - Count algorithm to use to count upserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   *\n   * @param options.defaultToNull - Make missing fields default to `null`.\n   * Otherwise, use the default value for the column. This only applies when\n   * inserting new rows, not when merging with existing rows under\n   * `ignoreDuplicates: false`.\n   */\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row | Row[],\n    {\n      onConflict,\n      ignoreDuplicates = false,\n      count,\n      defaultToNull = true,\n    }: {\n      onConflict?: string\n      ignoreDuplicates?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, Relationships> {\n    const method = 'POST'\n\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`]\n\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer'])\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (!defaultToNull) {\n      prefersHeaders.push('missing=default')\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n\n  /**\n   * Perform an UPDATE on the table or view.\n   *\n   * By default, updated rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param values - The values to update with\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count updated rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  update<Row extends Relation extends { Update: unknown } ? Relation['Update'] : never>(\n    values: Row,\n    {\n      count,\n    }: {\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, Relationships> {\n    const method = 'PATCH'\n    const prefersHeaders = []\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer'])\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n\n  /**\n   * Perform a DELETE on the table or view.\n   *\n   * By default, deleted rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count deleted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  delete({\n    count,\n  }: {\n    count?: 'exact' | 'planned' | 'estimated'\n  } = {}): PostgrestFilterBuilder<Schema, Relation['Row'], null, Relationships> {\n    const method = 'DELETE'\n    const prefersHeaders = []\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n}\n","import { version } from './version'\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `postgrest-js/${version}` }\n","export const version = '1.7.0'\n","import PostgrestQueryBuilder from './PostgrestQueryBuilder'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\nimport PostgrestBuilder from './PostgrestBuilder'\nimport { DEFAULT_HEADERS } from './constants'\nimport { Fetch, GenericSchema } from './types'\n\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nexport default class PostgrestClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n> {\n  url: string\n  headers: Record<string, string>\n  schema?: SchemaName\n  fetch?: Fetch\n\n  // TODO: Add back shouldThrowOnError once we figure out the typings\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url - URL of the PostgREST endpoint\n   * @param options - Named parameters\n   * @param options.headers - Custom headers\n   * @param options.schema - Postgres schema to switch to\n   * @param options.fetch - Custom fetch\n   */\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: {\n      headers?: Record<string, string>\n      schema?: SchemaName\n      fetch?: Fetch\n    } = {}\n  ) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.schema = schema\n    this.fetch = fetch\n  }\n\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName]\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<Schema, View>\n  from(relation: string): PostgrestQueryBuilder<Schema, any>\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation: string): PostgrestQueryBuilder<Schema, any> {\n    const url = new URL(`${this.url}/${relation}`)\n    return new PostgrestQueryBuilder<Schema, any>(url, {\n      headers: { ...this.headers },\n      schema: this.schema,\n      fetch: this.fetch,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc<\n    FunctionName extends string & keyof Schema['Functions'],\n    Function_ extends Schema['Functions'][FunctionName]\n  >(\n    fn: FunctionName,\n    args: Function_['Args'] = {},\n    {\n      head = false,\n      count,\n    }: {\n      head?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<\n    Schema,\n    Function_['Returns'] extends any[]\n      ? Function_['Returns'][number] extends Record<string, unknown>\n        ? Function_['Returns'][number]\n        : never\n      : never,\n    Function_['Returns']\n  > {\n    let method: 'HEAD' | 'POST'\n    const url = new URL(`${this.url}/rpc/${fn}`)\n    let body: unknown | undefined\n    if (head) {\n      method = 'HEAD'\n      Object.entries(args).forEach(([name, value]) => {\n        url.searchParams.append(name, `${value}`)\n      })\n    } else {\n      method = 'POST'\n      body = args\n    }\n\n    const headers = { ...this.headers }\n    if (count) {\n      headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url,\n      headers,\n      schema: this.schema,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<Function_['Returns']>)\n  }\n}\n","export const version = '2.7.2'\n","/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  timer: number | undefined = undefined\n  tries: number = 0\n\n  constructor(public callback: Function, public timerCalc: Function) {\n    this.callback = callback\n    this.timerCalc = timerCalc\n  }\n\n  reset() {\n    this.tries = 0\n    clearTimeout(this.timer)\n  }\n\n  // Cancels any previous scheduleTimeout and schedules callback\n  scheduleTimeout() {\n    clearTimeout(this.timer)\n\n    this.timer = <any>setTimeout(() => {\n      this.tries = this.tries + 1\n      this.callback()\n    }, this.timerCalc(this.tries + 1))\n  }\n}\n","/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\n\nimport type {\n  PresenceOpts,\n  PresenceOnJoinCallback,\n  PresenceOnLeaveCallback,\n} from 'phoenix'\nimport type RealtimeChannel from './RealtimeChannel'\n\ntype Presence<T extends { [key: string]: any } = {}> = {\n  presence_ref: string\n} & T\n\nexport type RealtimePresenceState<T extends { [key: string]: any } = {}> = {\n  [key: string]: Presence<T>[]\n}\n\nexport type RealtimePresenceJoinPayload<T extends { [key: string]: any }> = {\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}`\n  key: string\n  currentPresences: Presence<T>[]\n  newPresences: Presence<T>[]\n}\n\nexport type RealtimePresenceLeavePayload<T extends { [key: string]: any }> = {\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}`\n  key: string\n  currentPresences: Presence<T>[]\n  leftPresences: Presence<T>[]\n}\n\nexport enum REALTIME_PRESENCE_LISTEN_EVENTS {\n  SYNC = 'sync',\n  JOIN = 'join',\n  LEAVE = 'leave',\n}\n\ntype PresenceDiff = {\n  joins: RealtimePresenceState\n  leaves: RealtimePresenceState\n}\n\ntype RawPresenceState = {\n  [key: string]: {\n    metas: {\n      phx_ref?: string\n      phx_ref_prev?: string\n      [key: string]: any\n    }[]\n  }\n}\n\ntype RawPresenceDiff = {\n  joins: RawPresenceState\n  leaves: RawPresenceState\n}\n\ntype PresenceChooser<T> = (key: string, presences: Presence[]) => T\n\nexport default class RealtimePresence {\n  state: RealtimePresenceState = {}\n  pendingDiffs: RawPresenceDiff[] = []\n  joinRef: string | null = null\n  caller: {\n    onJoin: PresenceOnJoinCallback\n    onLeave: PresenceOnLeaveCallback\n    onSync: () => void\n  } = {\n    onJoin: () => {},\n    onLeave: () => {},\n    onSync: () => {},\n  }\n\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(public channel: RealtimeChannel, opts?: PresenceOpts) {\n    const events = opts?.events || {\n      state: 'presence_state',\n      diff: 'presence_diff',\n    }\n\n    this.channel._on(events.state, {}, (newState: RawPresenceState) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      this.joinRef = this.channel._joinRef()\n\n      this.state = RealtimePresence.syncState(\n        this.state,\n        newState,\n        onJoin,\n        onLeave\n      )\n\n      this.pendingDiffs.forEach((diff) => {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n      })\n\n      this.pendingDiffs = []\n\n      onSync()\n    })\n\n    this.channel._on(events.diff, {}, (diff: RawPresenceDiff) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff)\n      } else {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n\n        onSync()\n      }\n    })\n\n    this.onJoin((key, currentPresences, newPresences) => {\n      this.channel._trigger('presence', {\n        event: 'join',\n        key,\n        currentPresences,\n        newPresences,\n      })\n    })\n\n    this.onLeave((key, currentPresences, leftPresences) => {\n      this.channel._trigger('presence', {\n        event: 'leave',\n        key,\n        currentPresences,\n        leftPresences,\n      })\n    })\n\n    this.onSync(() => {\n      this.channel._trigger('presence', { event: 'sync' })\n    })\n  }\n\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n  private static syncState(\n    currentState: RealtimePresenceState,\n    newState: RawPresenceState | RealtimePresenceState,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): RealtimePresenceState {\n    const state = this.cloneDeep(currentState)\n    const transformedState = this.transformState(newState)\n    const joins: RealtimePresenceState = {}\n    const leaves: RealtimePresenceState = {}\n\n    this.map(state, (key: string, presences: Presence[]) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences\n      }\n    })\n\n    this.map(transformedState, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key]\n\n      if (currentPresences) {\n        const newPresenceRefs = newPresences.map(\n          (m: Presence) => m.presence_ref\n        )\n        const curPresenceRefs = currentPresences.map(\n          (m: Presence) => m.presence_ref\n        )\n        const joinedPresences: Presence[] = newPresences.filter(\n          (m: Presence) => curPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n        const leftPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => newPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences\n        }\n\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences\n        }\n      } else {\n        joins[key] = newPresences\n      }\n    })\n\n    return this.syncDiff(state, { joins, leaves }, onJoin, onLeave)\n  }\n\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   *\n   * @internal\n   */\n  private static syncDiff(\n    state: RealtimePresenceState,\n    diff: RawPresenceDiff | PresenceDiff,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): RealtimePresenceState {\n    const { joins, leaves } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves),\n    }\n\n    if (!onJoin) {\n      onJoin = () => {}\n    }\n\n    if (!onLeave) {\n      onLeave = () => {}\n    }\n\n    this.map(joins, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key] ?? []\n      state[key] = this.cloneDeep(newPresences)\n\n      if (currentPresences.length > 0) {\n        const joinedPresenceRefs = state[key].map(\n          (m: Presence) => m.presence_ref\n        )\n        const curPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => joinedPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n\n        state[key].unshift(...curPresences)\n      }\n\n      onJoin(key, currentPresences, newPresences)\n    })\n\n    this.map(leaves, (key, leftPresences: Presence[]) => {\n      let currentPresences: Presence[] = state[key]\n\n      if (!currentPresences) return\n\n      const presenceRefsToRemove = leftPresences.map(\n        (m: Presence) => m.presence_ref\n      )\n      currentPresences = currentPresences.filter(\n        (m: Presence) => presenceRefsToRemove.indexOf(m.presence_ref) < 0\n      )\n\n      state[key] = currentPresences\n\n      onLeave(key, currentPresences, leftPresences)\n\n      if (currentPresences.length === 0) delete state[key]\n    })\n\n    return state\n  }\n\n  /** @internal */\n  private static map<T = any>(\n    obj: RealtimePresenceState,\n    func: PresenceChooser<T>\n  ): T[] {\n    return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]))\n  }\n\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_ref'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_ref: '2', user_id: 1 },\n   *    { presence_ref: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   *\n   * @internal\n   */\n  private static transformState(\n    state: RawPresenceState | RealtimePresenceState\n  ): RealtimePresenceState {\n    state = this.cloneDeep(state)\n\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key]\n\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map((presence) => {\n          presence['presence_ref'] = presence['phx_ref']\n\n          delete presence['phx_ref']\n          delete presence['phx_ref_prev']\n\n          return presence\n        }) as Presence[]\n      } else {\n        newState[key] = presences\n      }\n\n      return newState\n    }, {} as RealtimePresenceState)\n  }\n\n  /** @internal */\n  private static cloneDeep(obj: { [key: string]: any }) {\n    return JSON.parse(JSON.stringify(obj))\n  }\n\n  /** @internal */\n  private onJoin(callback: PresenceOnJoinCallback): void {\n    this.caller.onJoin = callback\n  }\n\n  /** @internal */\n  private onLeave(callback: PresenceOnLeaveCallback): void {\n    this.caller.onLeave = callback\n  }\n\n  /** @internal */\n  private onSync(callback: () => void): void {\n    this.caller.onSync = callback\n  }\n\n  /** @internal */\n  private inPendingSyncState(): boolean {\n    return !this.joinRef || this.joinRef !== this.channel._joinRef()\n  }\n}\n","// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\n\nexport default class Serializer {\n  HEADER_LENGTH = 1\n\n  decode(rawPayload: ArrayBuffer | string, callback: Function) {\n    if (rawPayload.constructor === ArrayBuffer) {\n      return callback(this._binaryDecode(rawPayload))\n    }\n\n    if (typeof rawPayload === 'string') {\n      return callback(JSON.parse(rawPayload))\n    }\n\n    return callback({})\n  }\n\n  private _binaryDecode(buffer: ArrayBuffer) {\n    const view = new DataView(buffer)\n    const decoder = new TextDecoder()\n\n    return this._decodeBroadcast(buffer, view, decoder)\n  }\n\n  private _decodeBroadcast(\n    buffer: ArrayBuffer,\n    view: DataView,\n    decoder: TextDecoder\n  ): {\n    ref: null\n    topic: string\n    event: string\n    payload: { [key: string]: any }\n  } {\n    const topicSize = view.getUint8(1)\n    const eventSize = view.getUint8(2)\n    let offset = this.HEADER_LENGTH + 2\n    const topic = decoder.decode(buffer.slice(offset, offset + topicSize))\n    offset = offset + topicSize\n    const event = decoder.decode(buffer.slice(offset, offset + eventSize))\n    offset = offset + eventSize\n    const data = JSON.parse(\n      decoder.decode(buffer.slice(offset, buffer.byteLength))\n    )\n\n    return { ref: null, topic: topic, event: event, payload: data }\n  }\n}\n","import { DEFAULT_TIMEOUT } from '../lib/constants'\nimport type RealtimeChannel from '../RealtimeChannel'\n\nexport default class Push {\n  sent: boolean = false\n  timeoutTimer: number | undefined = undefined\n  ref: string = ''\n  receivedResp: {\n    status: string\n    response: { [key: string]: any }\n  } | null = null\n  recHooks: {\n    status: string\n    callback: Function\n  }[] = []\n  refEvent: string | null = null\n  rateLimited: boolean = false\n\n  /**\n   * Initializes the Push\n   *\n   * @param channel The Channel\n   * @param event The event, for example `\"phx_join\"`\n   * @param payload The payload, for example `{user_id: 123}`\n   * @param timeout The push timeout in milliseconds\n   */\n  constructor(\n    public channel: RealtimeChannel,\n    public event: string,\n    public payload: { [key: string]: any } = {},\n    public timeout: number = DEFAULT_TIMEOUT\n  ) {}\n\n  resend(timeout: number) {\n    this.timeout = timeout\n    this._cancelRefEvent()\n    this.ref = ''\n    this.refEvent = null\n    this.receivedResp = null\n    this.sent = false\n    this.send()\n  }\n\n  send() {\n    if (this._hasReceived('timeout')) {\n      return\n    }\n    this.startTimeout()\n    this.sent = true\n    const status = this.channel.socket.push({\n      topic: this.channel.topic,\n      event: this.event,\n      payload: this.payload,\n      ref: this.ref,\n      join_ref: this.channel._joinRef(),\n    })\n    if (status === 'rate limited') {\n      this.rateLimited = true\n    }\n  }\n\n  updatePayload(payload: { [key: string]: any }): void {\n    this.payload = { ...this.payload, ...payload }\n  }\n\n  receive(status: string, callback: Function) {\n    if (this._hasReceived(status)) {\n      callback(this.receivedResp?.response)\n    }\n\n    this.recHooks.push({ status, callback })\n    return this\n  }\n\n  startTimeout() {\n    if (this.timeoutTimer) {\n      return\n    }\n    this.ref = this.channel.socket._makeRef()\n    this.refEvent = this.channel._replyEventName(this.ref)\n\n    const callback = (payload: any) => {\n      this._cancelRefEvent()\n      this._cancelTimeout()\n      this.receivedResp = payload\n      this._matchReceive(payload)\n    }\n\n    this.channel._on(this.refEvent, {}, callback)\n\n    this.timeoutTimer = <any>setTimeout(() => {\n      this.trigger('timeout', {})\n    }, this.timeout)\n  }\n\n  trigger(status: string, response: any) {\n    if (this.refEvent)\n      this.channel._trigger(this.refEvent, { status, response })\n  }\n\n  destroy() {\n    this._cancelRefEvent()\n    this._cancelTimeout()\n  }\n\n  private _cancelRefEvent() {\n    if (!this.refEvent) {\n      return\n    }\n\n    this.channel._off(this.refEvent, {})\n  }\n\n  private _cancelTimeout() {\n    clearTimeout(this.timeoutTimer)\n    this.timeoutTimer = undefined\n  }\n\n  private _matchReceive({\n    status,\n    response,\n  }: {\n    status: string\n    response: Function\n  }) {\n    this.recHooks\n      .filter((h) => h.status === status)\n      .forEach((h) => h.callback(response))\n  }\n\n  private _hasReceived(status: string) {\n    return this.receivedResp && this.receivedResp.status === status\n  }\n}\n","/**\n * Helpers to convert the change Payload into native JS types.\n */\n\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\n\nexport enum PostgresTypes {\n  abstime = 'abstime',\n  bool = 'bool',\n  date = 'date',\n  daterange = 'daterange',\n  float4 = 'float4',\n  float8 = 'float8',\n  int2 = 'int2',\n  int4 = 'int4',\n  int4range = 'int4range',\n  int8 = 'int8',\n  int8range = 'int8range',\n  json = 'json',\n  jsonb = 'jsonb',\n  money = 'money',\n  numeric = 'numeric',\n  oid = 'oid',\n  reltime = 'reltime',\n  text = 'text',\n  time = 'time',\n  timestamp = 'timestamp',\n  timestamptz = 'timestamptz',\n  timetz = 'timetz',\n  tsrange = 'tsrange',\n  tstzrange = 'tstzrange',\n}\n\ntype Columns = {\n  name: string // the column name. eg: \"user_id\"\n  type: string // the column type. eg: \"uuid\"\n  flags?: string[] // any special flags for the column. eg: [\"key\"]\n  type_modifier?: number // the type modifier. eg: 4294967295\n}[]\n\ntype BaseValue = null | string | number | boolean\ntype RecordValue = BaseValue | BaseValue[]\n\ntype Record = {\n  [key: string]: RecordValue\n}\n\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nexport const convertChangeData = (\n  columns: Columns,\n  record: Record,\n  options: { skipTypes?: string[] } = {}\n): Record => {\n  const skipTypes = options.skipTypes ?? []\n\n  return Object.keys(record).reduce((acc, rec_key) => {\n    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes)\n    return acc\n  }, {} as Record)\n}\n\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nexport const convertColumn = (\n  columnName: string,\n  columns: Columns,\n  record: Record,\n  skipTypes: string[]\n): RecordValue => {\n  const column = columns.find((x) => x.name === columnName)\n  const colType = column?.type\n  const value = record[columnName]\n\n  if (colType && !skipTypes.includes(colType)) {\n    return convertCell(colType, value)\n  }\n\n  return noop(value)\n}\n\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} value The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nexport const convertCell = (type: string, value: RecordValue): RecordValue => {\n  // if data type is an array\n  if (type.charAt(0) === '_') {\n    const dataType = type.slice(1, type.length)\n    return toArray(value, dataType)\n  }\n\n  // If not null, convert to correct type.\n  switch (type) {\n    case PostgresTypes.bool:\n      return toBoolean(value)\n    case PostgresTypes.float4:\n    case PostgresTypes.float8:\n    case PostgresTypes.int2:\n    case PostgresTypes.int4:\n    case PostgresTypes.int8:\n    case PostgresTypes.numeric:\n    case PostgresTypes.oid:\n      return toNumber(value)\n    case PostgresTypes.json:\n    case PostgresTypes.jsonb:\n      return toJson(value)\n    case PostgresTypes.timestamp:\n      return toTimestampString(value) // Format to be consistent with PostgREST\n    case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n    case PostgresTypes.date: // To allow users to cast it based on Timezone\n    case PostgresTypes.daterange:\n    case PostgresTypes.int4range:\n    case PostgresTypes.int8range:\n    case PostgresTypes.money:\n    case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n    case PostgresTypes.text:\n    case PostgresTypes.time: // To allow users to cast it based on Timezone\n    case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n    case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n    case PostgresTypes.tsrange:\n    case PostgresTypes.tstzrange:\n      return noop(value)\n    default:\n      // Return the value for remaining types\n      return noop(value)\n  }\n}\n\nconst noop = (value: RecordValue): RecordValue => {\n  return value\n}\nexport const toBoolean = (value: RecordValue): RecordValue => {\n  switch (value) {\n    case 't':\n      return true\n    case 'f':\n      return false\n    default:\n      return value\n  }\n}\nexport const toNumber = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    const parsedValue = parseFloat(value)\n    if (!Number.isNaN(parsedValue)) {\n      return parsedValue\n    }\n  }\n  return value\n}\nexport const toJson = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    try {\n      return JSON.parse(value)\n    } catch (error) {\n      console.log(`JSON parse error: ${error}`)\n      return value\n    }\n  }\n  return value\n}\n\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nexport const toArray = (value: RecordValue, type: string): RecordValue => {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const lastIdx = value.length - 1\n  const closeBrace = value[lastIdx]\n  const openBrace = value[0]\n\n  // Confirm value is a Postgres array by checking curly brackets\n  if (openBrace === '{' && closeBrace === '}') {\n    let arr\n    const valTrim = value.slice(1, lastIdx)\n\n    // TODO: find a better solution to separate Postgres array data\n    try {\n      arr = JSON.parse('[' + valTrim + ']')\n    } catch (_) {\n      // WARNING: splitting on comma does not cover all edge cases\n      arr = valTrim ? valTrim.split(',') : []\n    }\n\n    return arr.map((val: BaseValue) => convertCell(type, val))\n  }\n\n  return value\n}\n\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nexport const toTimestampString = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    return value.replace(' ', 'T')\n  }\n\n  return value\n}\n","import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants'\nimport Push from './lib/push'\nimport type RealtimeClient from './RealtimeClient'\nimport Timer from './lib/timer'\nimport RealtimePresence, {\n  REALTIME_PRESENCE_LISTEN_EVENTS,\n} from './RealtimePresence'\nimport type {\n  RealtimePresenceJoinPayload,\n  RealtimePresenceLeavePayload,\n  RealtimePresenceState,\n} from './RealtimePresence'\nimport * as Transformers from './lib/transformers'\n\nexport type RealtimeChannelOptions = {\n  config: {\n    /**\n     * self option enables client to receive message it broadcast\n     * ack option instructs server to acknowledge that broadcast message was received\n     */\n    broadcast?: { self?: boolean; ack?: boolean }\n    /**\n     * key option is used to track presence payload across clients\n     */\n    presence?: { key?: string }\n  }\n}\n\ntype RealtimePostgresChangesPayloadBase = {\n  schema: string\n  table: string\n  commit_timestamp: string\n  errors: string[]\n}\n\nexport type RealtimePostgresInsertPayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`\n    new: T\n    old: {}\n  }\n\nexport type RealtimePostgresUpdatePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`\n    new: T\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresDeletePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`\n    new: {}\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresChangesPayload<T extends { [key: string]: any }> =\n  | RealtimePostgresInsertPayload<T>\n  | RealtimePostgresUpdatePayload<T>\n  | RealtimePostgresDeletePayload<T>\n\nexport type RealtimePostgresChangesFilter<\n  T extends `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT}`\n> = {\n  /**\n   * The type of database change to listen to.\n   */\n  event: T\n  /**\n   * The database schema to listen to.\n   */\n  schema: string\n  /**\n   * The database table to listen to.\n   */\n  table?: string\n  /**\n   * Receive database changes when filter is matched.\n   */\n  filter?: string\n}\n\nexport type RealtimeChannelSendResponse = 'ok' | 'timed out' | 'rate limited'\n\nexport enum REALTIME_POSTGRES_CHANGES_LISTEN_EVENT {\n  ALL = '*',\n  INSERT = 'INSERT',\n  UPDATE = 'UPDATE',\n  DELETE = 'DELETE',\n}\n\nexport enum REALTIME_LISTEN_TYPES {\n  BROADCAST = 'broadcast',\n  PRESENCE = 'presence',\n  /**\n   * listen to Postgres changes.\n   */\n  POSTGRES_CHANGES = 'postgres_changes',\n}\n\nexport enum REALTIME_SUBSCRIBE_STATES {\n  SUBSCRIBED = 'SUBSCRIBED',\n  TIMED_OUT = 'TIMED_OUT',\n  CLOSED = 'CLOSED',\n  CHANNEL_ERROR = 'CHANNEL_ERROR',\n}\n\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n **/\nexport default class RealtimeChannel {\n  bindings: {\n    [key: string]: {\n      type: string\n      filter: { [key: string]: any }\n      callback: Function\n      id?: string\n    }[]\n  } = {}\n  timeout: number\n  state = CHANNEL_STATES.closed\n  joinedOnce = false\n  joinPush: Push\n  rejoinTimer: Timer\n  pushBuffer: Push[] = []\n  presence: RealtimePresence\n\n  constructor(\n    /** Topic name can be any string. */\n    public topic: string,\n    public params: RealtimeChannelOptions = { config: {} },\n    public socket: RealtimeClient\n  ) {\n    this.params.config = {\n      ...{\n        broadcast: { ack: false, self: false },\n        presence: { key: '' },\n      },\n      ...params.config,\n    }\n    this.timeout = this.socket.timeout\n    this.joinPush = new Push(\n      this,\n      CHANNEL_EVENTS.join,\n      this.params,\n      this.timeout\n    )\n    this.rejoinTimer = new Timer(\n      () => this._rejoinUntilConnected(),\n      this.socket.reconnectAfterMs\n    )\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined\n      this.rejoinTimer.reset()\n      this.pushBuffer.forEach((pushEvent: Push) => pushEvent.send())\n      this.pushBuffer = []\n    })\n    this._onClose(() => {\n      this.rejoinTimer.reset()\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`)\n      this.state = CHANNEL_STATES.closed\n      this.socket._remove(this)\n    })\n    this._onError((reason: string) => {\n      if (this._isLeaving() || this._isClosed()) {\n        return\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.joinPush.receive('timeout', () => {\n      if (!this._isJoining()) {\n        return\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this._on(CHANNEL_EVENTS.reply, {}, (payload: any, ref: string) => {\n      this._trigger(this._replyEventName(ref), payload)\n    })\n\n    this.presence = new RealtimePresence(this)\n  }\n\n  /** Subscribe registers your client with the server */\n  subscribe(\n    callback?: (status: `${REALTIME_SUBSCRIBE_STATES}`, err?: Error) => void,\n    timeout = this.timeout\n  ): RealtimeChannel {\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`\n    } else {\n      const {\n        config: { broadcast, presence },\n      } = this.params\n      this._onError((e: Error) => callback && callback('CHANNEL_ERROR', e))\n      this._onClose(() => callback && callback('CLOSED'))\n\n      const accessTokenPayload: { access_token?: string } = {}\n      const config = {\n        broadcast,\n        presence,\n        postgres_changes:\n          this.bindings.postgres_changes?.map((r) => r.filter) ?? [],\n      }\n\n      if (this.socket.accessToken) {\n        accessTokenPayload.access_token = this.socket.accessToken\n      }\n\n      this.updateJoinPayload({ ...{ config }, ...accessTokenPayload })\n\n      this.joinedOnce = true\n      this._rejoin(timeout)\n\n      this.joinPush\n        .receive(\n          'ok',\n          ({\n            postgres_changes: serverPostgresFilters,\n          }: {\n            postgres_changes: {\n              id: string\n              event: string\n              schema?: string\n              table?: string\n              filter?: string\n            }[]\n          }) => {\n            this.socket.accessToken &&\n              this.socket.setAuth(this.socket.accessToken)\n\n            if (serverPostgresFilters === undefined) {\n              callback && callback('SUBSCRIBED')\n              return\n            } else {\n              const clientPostgresBindings = this.bindings.postgres_changes\n              const bindingsLen = clientPostgresBindings?.length ?? 0\n              const newPostgresBindings = []\n\n              for (let i = 0; i < bindingsLen; i++) {\n                const clientPostgresBinding = clientPostgresBindings[i]\n                const {\n                  filter: { event, schema, table, filter },\n                } = clientPostgresBinding\n                const serverPostgresFilter =\n                  serverPostgresFilters && serverPostgresFilters[i]\n\n                if (\n                  serverPostgresFilter &&\n                  serverPostgresFilter.event === event &&\n                  serverPostgresFilter.schema === schema &&\n                  serverPostgresFilter.table === table &&\n                  serverPostgresFilter.filter === filter\n                ) {\n                  newPostgresBindings.push({\n                    ...clientPostgresBinding,\n                    id: serverPostgresFilter.id,\n                  })\n                } else {\n                  this.unsubscribe()\n                  callback &&\n                    callback(\n                      'CHANNEL_ERROR',\n                      new Error(\n                        'mismatch between server and client bindings for postgres changes'\n                      )\n                    )\n                  return\n                }\n              }\n\n              this.bindings.postgres_changes = newPostgresBindings\n\n              callback && callback('SUBSCRIBED')\n              return\n            }\n          }\n        )\n        .receive('error', (error: { [key: string]: any }) => {\n          callback &&\n            callback(\n              'CHANNEL_ERROR',\n              new Error(\n                JSON.stringify(Object.values(error).join(', ') || 'error')\n              )\n            )\n          return\n        })\n        .receive('timeout', () => {\n          callback && callback('TIMED_OUT')\n          return\n        })\n    }\n\n    return this\n  }\n\n  presenceState<\n    T extends { [key: string]: any } = {}\n  >(): RealtimePresenceState<T> {\n    return this.presence.state as RealtimePresenceState<T>\n  }\n\n  async track(\n    payload: { [key: string]: any },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'track',\n        payload,\n      },\n      opts.timeout || this.timeout\n    )\n  }\n\n  async untrack(\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'untrack',\n      },\n      opts\n    )\n  }\n\n  /**\n   * Creates an event handler that listens to changes.\n   */\n  on(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.SYNC}` },\n    callback: () => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}` },\n    callback: (payload: RealtimePresenceJoinPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}` },\n    callback: (payload: RealtimePresenceLeavePayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.ALL}`>,\n    callback: (payload: RealtimePostgresChangesPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`>,\n    callback: (payload: RealtimePostgresInsertPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`>,\n    callback: (payload: RealtimePostgresUpdatePayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`>,\n    callback: (payload: RealtimePostgresDeletePayload<T>) => void\n  ): RealtimeChannel\n  /**\n   * The following is placed here to display on supabase.com/docs/reference/javascript/subscribe.\n   * @param type One of \"broadcast\", \"presence\", or \"postgres_changes\".\n   * @param filter Custom object specific to the Realtime feature detailing which payloads to receive.\n   * @param callback Function to be invoked when event handler is triggered.\n   */\n  on(\n    type: `${REALTIME_LISTEN_TYPES.BROADCAST}`,\n    filter: { event: string },\n    callback: (payload: {\n      type: `${REALTIME_LISTEN_TYPES.BROADCAST}`\n      event: string\n      [key: string]: any\n    }) => void\n  ): RealtimeChannel\n  on(\n    type: `${REALTIME_LISTEN_TYPES}`,\n    filter: { event: string; [key: string]: string },\n    callback: (payload: any) => void\n  ): RealtimeChannel {\n    return this._on(type, filter, callback)\n  }\n\n  send(\n    payload: { type: string; [key: string]: any },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return new Promise((resolve) => {\n      const push = this._push(\n        payload.type,\n        payload,\n        opts.timeout || this.timeout\n      )\n\n      if (push.rateLimited) {\n        resolve('rate limited')\n      }\n\n      if (\n        payload.type === 'broadcast' &&\n        !this.params?.config?.broadcast?.ack\n      ) {\n        resolve('ok')\n      }\n\n      push.receive('ok', () => resolve('ok'))\n      push.receive('timeout', () => resolve('timed out'))\n    })\n  }\n\n  updateJoinPayload(payload: { [key: string]: any }): void {\n    this.joinPush.updatePayload(payload)\n  }\n\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout): Promise<'ok' | 'timed out' | 'error'> {\n    this.state = CHANNEL_STATES.leaving\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`)\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef())\n    }\n\n    this.rejoinTimer.reset()\n    // Destroy joinPush to avoid connection timeouts during unscription phase\n    this.joinPush.destroy()\n\n    return new Promise((resolve) => {\n      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout)\n\n      leavePush\n        .receive('ok', () => {\n          onClose()\n          resolve('ok')\n        })\n        .receive('timeout', () => {\n          onClose()\n          resolve('timed out')\n        })\n        .receive('error', () => {\n          resolve('error')\n        })\n\n      leavePush.send()\n\n      if (!this._canPush()) {\n        leavePush.trigger('ok', {})\n      }\n    })\n  }\n\n  /** @internal */\n  _push(\n    event: string,\n    payload: { [key: string]: any },\n    timeout = this.timeout\n  ) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`\n    }\n    let pushEvent = new Push(this, event, payload, timeout)\n    if (this._canPush()) {\n      pushEvent.send()\n    } else {\n      pushEvent.startTimeout()\n      this.pushBuffer.push(pushEvent)\n    }\n\n    return pushEvent\n  }\n\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   *\n   * @internal\n   */\n  _onMessage(_event: string, payload: any, _ref?: string) {\n    return payload\n  }\n\n  /** @internal */\n  _isMember(topic: string): boolean {\n    return this.topic === topic\n  }\n\n  /** @internal */\n  _joinRef(): string {\n    return this.joinPush.ref\n  }\n\n  /** @internal */\n  _trigger(type: string, payload?: any, ref?: string) {\n    const typeLower = type.toLocaleLowerCase()\n    const { close, error, leave, join } = CHANNEL_EVENTS\n    const events: string[] = [close, error, leave, join]\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n      return\n    }\n    let handledPayload = this._onMessage(typeLower, payload, ref)\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified'\n    }\n\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\n      this.bindings.postgres_changes\n        ?.filter((bind) => {\n          return (\n            bind.filter?.event === '*' ||\n            bind.filter?.event?.toLocaleLowerCase() === typeLower\n          )\n        })\n        .map((bind) => bind.callback(handledPayload, ref))\n    } else {\n      this.bindings[typeLower]\n        ?.filter((bind) => {\n          if (\n            ['broadcast', 'presence', 'postgres_changes'].includes(typeLower)\n          ) {\n            if ('id' in bind) {\n              const bindId = bind.id\n              const bindEvent = bind.filter?.event\n              return (\n                bindId &&\n                payload.ids?.includes(bindId) &&\n                (bindEvent === '*' ||\n                  bindEvent?.toLocaleLowerCase() ===\n                    payload.data?.type.toLocaleLowerCase())\n              )\n            } else {\n              const bindEvent = bind?.filter?.event?.toLocaleLowerCase()\n              return (\n                bindEvent === '*' ||\n                bindEvent === payload?.event?.toLocaleLowerCase()\n              )\n            }\n          } else {\n            return bind.type.toLocaleLowerCase() === typeLower\n          }\n        })\n        .map((bind) => {\n          if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n            const postgresChanges = handledPayload.data\n            const { schema, table, commit_timestamp, type, errors } =\n              postgresChanges\n            const enrichedPayload = {\n              schema: schema,\n              table: table,\n              commit_timestamp: commit_timestamp,\n              eventType: type,\n              new: {},\n              old: {},\n              errors: errors,\n            }\n            handledPayload = {\n              ...enrichedPayload,\n              ...this._getPayloadRecords(postgresChanges),\n            }\n          }\n          bind.callback(handledPayload, ref)\n        })\n    }\n  }\n\n  /** @internal */\n  _isClosed(): boolean {\n    return this.state === CHANNEL_STATES.closed\n  }\n\n  /** @internal */\n  _isJoined(): boolean {\n    return this.state === CHANNEL_STATES.joined\n  }\n\n  /** @internal */\n  _isJoining(): boolean {\n    return this.state === CHANNEL_STATES.joining\n  }\n\n  /** @internal */\n  _isLeaving(): boolean {\n    return this.state === CHANNEL_STATES.leaving\n  }\n\n  /** @internal */\n  _replyEventName(ref: string): string {\n    return `chan_reply_${ref}`\n  }\n\n  /** @internal */\n  _on(type: string, filter: { [key: string]: any }, callback: Function) {\n    const typeLower = type.toLocaleLowerCase()\n\n    const binding = {\n      type: typeLower,\n      filter: filter,\n      callback: callback,\n    }\n\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower].push(binding)\n    } else {\n      this.bindings[typeLower] = [binding]\n    }\n\n    return this\n  }\n\n  /** @internal */\n  _off(type: string, filter: { [key: string]: any }) {\n    const typeLower = type.toLocaleLowerCase()\n\n    this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n      return !(\n        bind.type?.toLocaleLowerCase() === typeLower &&\n        RealtimeChannel.isEqual(bind.filter, filter)\n      )\n    })\n    return this\n  }\n\n  /** @internal */\n  private static isEqual(\n    obj1: { [key: string]: string },\n    obj2: { [key: string]: string }\n  ) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false\n    }\n\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /** @internal */\n  private _rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout()\n    if (this.socket.isConnected()) {\n      this._rejoin()\n    }\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   *\n   * @internal\n   */\n  private _onClose(callback: Function) {\n    this._on(CHANNEL_EVENTS.close, {}, callback)\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   *\n   * @internal\n   */\n  private _onError(callback: Function) {\n    this._on(CHANNEL_EVENTS.error, {}, (reason: string) => callback(reason))\n  }\n\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   *\n   * @internal\n   */\n  private _canPush(): boolean {\n    return this.socket.isConnected() && this._isJoined()\n  }\n\n  /** @internal */\n  private _rejoin(timeout = this.timeout): void {\n    if (this._isLeaving()) {\n      return\n    }\n    this.socket._leaveOpenTopic(this.topic)\n    this.state = CHANNEL_STATES.joining\n    this.joinPush.resend(timeout)\n  }\n\n  /** @internal */\n  private _getPayloadRecords(payload: any) {\n    const records = {\n      new: {},\n      old: {},\n    }\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(\n        payload.columns,\n        payload.record\n      )\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(\n        payload.columns,\n        payload.old_record\n      )\n    }\n\n    return records\n  }\n}\n","import { w3cwebsocket } from 'websocket'\nimport {\n  VSN,\n  CHANNEL_EVENTS,\n  TRANSPORTS,\n  SOCKET_STATES,\n  DEFAULT_TIMEOUT,\n  WS_CLOSE_NORMAL,\n  DEFAULT_HEADERS,\n  CONNECTION_STATE,\n} from './lib/constants'\nimport Timer from './lib/timer'\nimport Serializer from './lib/serializer'\nimport RealtimeChannel from './RealtimeChannel'\nimport type { RealtimeChannelOptions } from './RealtimeChannel'\n\nexport type RealtimeClientOptions = {\n  transport?: WebSocket\n  timeout?: number\n  heartbeatIntervalMs?: number\n  logger?: Function\n  encode?: Function\n  decode?: Function\n  reconnectAfterMs?: Function\n  headers?: { [key: string]: string }\n  params?: { [key: string]: any }\n}\n\nexport type RealtimeMessage = {\n  topic: string\n  event: string\n  payload: any\n  ref: string\n  join_ref?: string\n}\n\nexport type RealtimeRemoveChannelResponse = 'ok' | 'timed out' | 'error'\n\nconst noop = () => {}\n\nexport default class RealtimeClient {\n  accessToken: string | null = null\n  channels: RealtimeChannel[] = []\n  endPoint: string = ''\n  headers?: { [key: string]: string } = DEFAULT_HEADERS\n  params?: { [key: string]: string } = {}\n  timeout: number = DEFAULT_TIMEOUT\n  transport: any = w3cwebsocket\n  heartbeatIntervalMs: number = 30000\n  heartbeatTimer: ReturnType<typeof setInterval> | undefined = undefined\n  pendingHeartbeatRef: string | null = null\n  ref: number = 0\n  reconnectTimer: Timer\n  logger: Function = noop\n  encode: Function\n  decode: Function\n  reconnectAfterMs: Function\n  conn: WebSocket | null = null\n  sendBuffer: Function[] = []\n  serializer: Serializer = new Serializer()\n  stateChangeCallbacks: {\n    open: Function[]\n    close: Function[]\n    error: Function[]\n    message: Function[]\n  } = {\n    open: [],\n    close: [],\n    error: [],\n    message: [],\n  }\n  eventsPerSecondLimitMs: number = 100\n  inThrottle: boolean = false\n\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint: string, options?: RealtimeClientOptions) {\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`\n\n    if (options?.params) this.params = options.params\n    if (options?.headers) this.headers = { ...this.headers, ...options.headers }\n    if (options?.timeout) this.timeout = options.timeout\n    if (options?.logger) this.logger = options.logger\n    if (options?.transport) this.transport = options.transport\n    if (options?.heartbeatIntervalMs)\n      this.heartbeatIntervalMs = options.heartbeatIntervalMs\n\n    const eventsPerSecond = options?.params?.eventsPerSecond\n    if (eventsPerSecond)\n      this.eventsPerSecondLimitMs = Math.floor(1000 / eventsPerSecond)\n\n    this.reconnectAfterMs = options?.reconnectAfterMs\n      ? options.reconnectAfterMs\n      : (tries: number) => {\n          return [1000, 2000, 5000, 10000][tries - 1] || 10000\n        }\n    this.encode = options?.encode\n      ? options.encode\n      : (payload: JSON, callback: Function) => {\n          return callback(JSON.stringify(payload))\n        }\n    this.decode = options?.decode\n      ? options.decode\n      : this.serializer.decode.bind(this.serializer)\n    this.reconnectTimer = new Timer(async () => {\n      this.disconnect()\n      this.connect()\n    }, this.reconnectAfterMs)\n  }\n\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect(): void {\n    if (this.conn) {\n      return\n    }\n\n    this.conn = new this.transport(this._endPointURL(), [], null, this.headers)\n\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer'\n      this.conn.onopen = () => this._onConnOpen()\n      this.conn.onerror = (error) => this._onConnError(error as ErrorEvent)\n      this.conn.onmessage = (event) => this._onConnMessage(event)\n      this.conn.onclose = (event) => this._onConnClose(event)\n    }\n  }\n\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code?: number, reason?: string): void {\n    if (this.conn) {\n      this.conn.onclose = function () {} // noop\n      if (code) {\n        this.conn.close(code, reason ?? '')\n      } else {\n        this.conn.close()\n      }\n      this.conn = null\n      // remove open handles\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n      this.reconnectTimer.reset()\n    }\n  }\n\n  /**\n   * Returns all created channels\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.channels\n  }\n\n  /**\n   * Unsubscribes and removes a single channel\n   * @param channel A RealtimeChannel instance\n   */\n  async removeChannel(\n    channel: RealtimeChannel\n  ): Promise<RealtimeRemoveChannelResponse> {\n    const status = await channel.unsubscribe()\n    if (this.channels.length === 0) {\n      this.disconnect()\n    }\n    return status\n  }\n\n  /**\n   * Unsubscribes and removes all channels\n   */\n  async removeAllChannels(): Promise<RealtimeRemoveChannelResponse[]> {\n    const values_1 = await Promise.all(\n      this.channels.map((channel) => channel.unsubscribe())\n    )\n    this.disconnect()\n    return values_1\n  }\n\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  log(kind: string, msg: string, data?: any) {\n    this.logger(kind, msg, data)\n  }\n\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState(): CONNECTION_STATE {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing\n      default:\n        return CONNECTION_STATE.Closed\n    }\n  }\n\n  /**\n   * Returns `true` is the connection is open.\n   */\n  isConnected(): boolean {\n    return this.connectionState() === CONNECTION_STATE.Open\n  }\n\n  channel(\n    topic: string,\n    params: RealtimeChannelOptions = { config: {} }\n  ): RealtimeChannel {\n    if (!this.isConnected()) {\n      this.connect()\n    }\n\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this)\n    this.channels.push(chan)\n    return chan\n  }\n\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data: RealtimeMessage): 'rate limited' | void {\n    const { topic, event, payload, ref } = data\n    let callback = () => {\n      this.encode(data, (result: any) => {\n        this.conn?.send(result)\n      })\n    }\n    this.log('push', `${topic} ${event} (${ref})`, payload)\n    if (this.isConnected()) {\n      if (['broadcast', 'presence', 'postgres_changes'].includes(event)) {\n        const isThrottled = this._throttle(callback)()\n        if (isThrottled) {\n          return 'rate limited'\n        }\n      } else {\n        callback()\n      }\n    } else {\n      this.sendBuffer.push(callback)\n    }\n  }\n\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n  setAuth(token: string | null): void {\n    this.accessToken = token\n\n    this.channels.forEach((channel) => {\n      token && channel.updateJoinPayload({ access_token: token })\n\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, { access_token: token })\n      }\n    })\n  }\n\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n  _makeRef(): string {\n    let newRef = this.ref + 1\n    if (newRef === this.ref) {\n      this.ref = 0\n    } else {\n      this.ref = newRef\n    }\n\n    return this.ref.toString()\n  }\n\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n  _leaveOpenTopic(topic: string): void {\n    let dupChannel = this.channels.find(\n      (c) => c.topic === topic && (c._isJoined() || c._isJoining())\n    )\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`)\n      dupChannel.unsubscribe()\n    }\n  }\n\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n  _remove(channel: RealtimeChannel) {\n    this.channels = this.channels.filter(\n      (c: RealtimeChannel) => c._joinRef() !== channel._joinRef()\n    )\n  }\n\n  /**\n   * Returns the URL of the websocket.\n   *\n   * @internal\n   */\n  private _endPointURL(): string {\n    return this._appendParams(\n      this.endPoint,\n      Object.assign({}, this.params, { vsn: VSN })\n    )\n  }\n\n  /** @internal */\n  private _onConnMessage(rawMessage: { data: any }) {\n    this.decode(rawMessage.data, (msg: RealtimeMessage) => {\n      let { topic, event, payload, ref } = msg\n\n      if (\n        (ref && ref === this.pendingHeartbeatRef) ||\n        event === payload?.type\n      ) {\n        this.pendingHeartbeatRef = null\n      }\n\n      this.log(\n        'receive',\n        `${payload.status || ''} ${topic} ${event} ${\n          (ref && '(' + ref + ')') || ''\n        }`,\n        payload\n      )\n      this.channels\n        .filter((channel: RealtimeChannel) => channel._isMember(topic))\n        .forEach((channel: RealtimeChannel) =>\n          channel._trigger(event, payload, ref)\n        )\n      this.stateChangeCallbacks.message.forEach((callback) => callback(msg))\n    })\n  }\n\n  /** @internal */\n  private _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`)\n    this._flushSendBuffer()\n    this.reconnectTimer.reset()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.heartbeatTimer = setInterval(\n      () => this._sendHeartbeat(),\n      this.heartbeatIntervalMs\n    )\n    this.stateChangeCallbacks.open.forEach((callback) => callback())!\n  }\n\n  /** @internal */\n  private _onConnClose(event: any) {\n    this.log('transport', 'close', event)\n    this._triggerChanError()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.reconnectTimer.scheduleTimeout()\n    this.stateChangeCallbacks.close.forEach((callback) => callback(event))\n  }\n\n  /** @internal */\n  private _onConnError(error: ErrorEvent) {\n    this.log('transport', error.message)\n    this._triggerChanError()\n    this.stateChangeCallbacks.error.forEach((callback) => callback(error))\n  }\n\n  /** @internal */\n  private _triggerChanError() {\n    this.channels.forEach((channel: RealtimeChannel) =>\n      channel._trigger(CHANNEL_EVENTS.error)\n    )\n  }\n\n  /** @internal */\n  private _appendParams(\n    url: string,\n    params: { [key: string]: string }\n  ): string {\n    if (Object.keys(params).length === 0) {\n      return url\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?'\n    const query = new URLSearchParams(params)\n\n    return `${url}${prefix}${query}`\n  }\n\n  /** @internal */\n  private _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach((callback) => callback())\n      this.sendBuffer = []\n    }\n  }\n  /** @internal */\n  private _sendHeartbeat() {\n    if (!this.isConnected()) {\n      return\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null\n      this.log(\n        'transport',\n        'heartbeat timeout. Attempting to re-establish connection'\n      )\n      this.conn?.close(WS_CLOSE_NORMAL, 'hearbeat timeout')\n      return\n    }\n    this.pendingHeartbeatRef = this._makeRef()\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef,\n    })\n    this.setAuth(this.accessToken)\n  }\n\n  /** @internal */\n  private _throttle(\n    callback: Function,\n    eventsPerSecondLimitMs: number = this.eventsPerSecondLimitMs\n  ): () => boolean {\n    return () => {\n      if (this.inThrottle) return true\n\n      callback()\n\n      if (eventsPerSecondLimitMs > 0) {\n        this.inThrottle = true\n\n        setTimeout(() => {\n          this.inThrottle = false\n        }, eventsPerSecondLimitMs)\n      }\n\n      return false\n    }\n  }\n}\n","export class StorageError extends Error {\n  protected __isStorageError = true\n\n  constructor(message: string) {\n    super(message)\n    this.name = 'StorageError'\n  }\n}\n\nexport function isStorageError(error: unknown): error is StorageError {\n  return typeof error === 'object' && error !== null && '__isStorageError' in error\n}\n\nexport class StorageApiError extends StorageError {\n  status: number\n\n  constructor(message: string, status: number) {\n    super(message)\n    this.name = 'StorageApiError'\n    this.status = status\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n    }\n  }\n}\n\nexport class StorageUnknownError extends StorageError {\n  originalError: unknown\n\n  constructor(message: string, originalError: unknown) {\n    super(message)\n    this.name = 'StorageUnknownError'\n    this.originalError = originalError\n  }\n}\n","type Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n\nexport const resolveResponse = async () => {\n  if (typeof Response === 'undefined') {\n    return (await import('cross-fetch')).Response\n  }\n\n  return Response\n}\n","import { StorageApiError, StorageUnknownError } from './errors'\nimport { resolveResponse } from './helpers'\nimport { FetchParameters } from './types'\n\nexport type Fetch = typeof fetch\n\nexport interface FetchOptions {\n  headers?: {\n    [key: string]: string\n  }\n  noResolveJson?: boolean\n}\n\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\nconst _getErrorMessage = (err: any): string =>\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\n\nconst handleError = async (error: unknown, reject: (reason?: any) => void) => {\n  const Res = await resolveResponse()\n\n  if (error instanceof Res) {\n    error\n      .json()\n      .then((err) => {\n        reject(new StorageApiError(_getErrorMessage(err), error.status || 500))\n      })\n      .catch((err) => {\n        reject(new StorageUnknownError(_getErrorMessage(err), err))\n      })\n  } else {\n    reject(new StorageUnknownError(_getErrorMessage(error), error))\n  }\n}\n\nconst _getRequestParams = (\n  method: RequestMethodType,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n) => {\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\n\n  if (method === 'GET') {\n    return params\n  }\n\n  params.headers = { 'Content-Type': 'application/json', ...options?.headers }\n  params.body = JSON.stringify(body)\n  return { ...params, ...parameters }\n}\n\nasync function _handleRequest(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    fetcher(url, _getRequestParams(method, options, parameters, body))\n      .then((result) => {\n        if (!result.ok) throw result\n        if (options?.noResolveJson) return result\n        return result.json()\n      })\n      .then((data) => resolve(data))\n      .catch((error) => handleError(error, reject))\n  })\n}\n\nexport async function get(\n  fetcher: Fetch,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'GET', url, options, parameters)\n}\n\nexport async function post(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'POST', url, options, parameters, body)\n}\n\nexport async function put(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'PUT', url, options, parameters, body)\n}\n\nexport async function remove(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'DELETE', url, options, parameters, body)\n}\n","import { isStorageError, StorageError } from '../lib/errors'\nimport { Fetch, get, post, remove } from '../lib/fetch'\nimport { resolveFetch } from '../lib/helpers'\nimport {\n  FileObject,\n  FileOptions,\n  SearchOptions,\n  FetchParameters,\n  TransformOptions,\n} from '../lib/types'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\ntype FileBody =\n  | ArrayBuffer\n  | ArrayBufferView\n  | Blob\n  | Buffer\n  | File\n  | FormData\n  | NodeJS.ReadableStream\n  | ReadableStream<Uint8Array>\n  | URLSearchParams\n  | string\n\nexport default class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const cleanPath = this._removeEmptyFolders(path)\n      const _path = this._getFinalPath(cleanPath)\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\n        method,\n        body: body as BodyInit,\n        headers,\n        ...(options?.duplex ? { duplex: options.duplex } : {}),\n      })\n\n      if (res.ok) {\n        return {\n          data: { path: cleanPath },\n          error: null,\n        }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async upload(\n    path: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Upload a file with a token generated from `createSignedUploadUrl`.\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param token The token generated from `createSignedUploadUrl`\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async uploadToSignedUrl(\n    path: string,\n    token: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ) {\n    const cleanPath = this._removeEmptyFolders(path)\n    const _path = this._getFinalPath(cleanPath)\n\n    const url = new URL(this.url + `/object/upload/sign/${_path}`)\n    url.searchParams.set('token', token)\n\n    try {\n      let body\n      const options = { upsert: DEFAULT_FILE_OPTIONS.upsert, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...{ 'x-upsert': String(options.upsert as boolean) },\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const res = await this.fetch(url.toString(), {\n        method: 'PUT',\n        body: body as BodyInit,\n        headers,\n      })\n\n      if (res.ok) {\n        return {\n          data: { path: cleanPath },\n          error: null,\n        }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a signed upload URL.\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\n   * They are valid for one minute.\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   */\n  async createSignedUploadUrl(\n    path: string\n  ): Promise<\n    | {\n        data: { signedUrl: string; token: string; path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let _path = this._getFinalPath(path)\n\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/upload/sign/${_path}`,\n        {},\n        { headers: this.headers }\n      )\n\n      const url = new URL(this.url + data.url)\n\n      const token = url.searchParams.get('token')\n\n      if (!token) {\n        throw new StorageError('No token returned by API')\n      }\n\n      return { data: { signedUrl: url.toString(), path, token }, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n  async move(\n    fromPath: string,\n    toPath: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Copies an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  async copy(\n    fromPath: string,\n    toPath: string\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/copy`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data: { path: data.Key }, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number,\n    options?: { download?: string | boolean; transform?: TransformOptions }\n  ): Promise<\n    | {\n        data: { signedUrl: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let _path = this._getFinalPath(path)\n\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn, ...(options?.transform ? { transform: options.transform } : {}) },\n        { headers: this.headers }\n      )\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`)\n      data = { signedUrl }\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n  async createSignedUrls(\n    paths: string[],\n    expiresIn: number,\n    options?: { download: string | boolean }\n  ): Promise<\n    | {\n        data: { error: string | null; path: string | null; signedUrl: string }[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${this.bucketId}`,\n        { expiresIn, paths },\n        { headers: this.headers }\n      )\n\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      return {\n        data: data.map((datum: { signedURL: string }) => ({\n          ...datum,\n          signedUrl: datum.signedURL\n            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n            : null,\n        })),\n        error: null,\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n   *\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  async download(\n    path: string,\n    options?: { transform?: TransformOptions }\n  ): Promise<\n    | {\n        data: Blob\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    const wantsTransformation = typeof options?.transform !== 'undefined'\n    const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object'\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\n    const queryString = transformationQuery ? `?${transformationQuery}` : ''\n\n    try {\n      const _path = this._getFinalPath(path)\n      const res = await get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n      const data = await res.blob()\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n   *\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  getPublicUrl(\n    path: string,\n    options?: { download?: string | boolean; transform?: TransformOptions }\n  ): { data: { publicUrl: string } } {\n    const _path = this._getFinalPath(path)\n    const _queryString = []\n\n    const downloadQueryParam = options?.download\n      ? `download=${options.download === true ? '' : options.download}`\n      : ''\n\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam)\n    }\n\n    const wantsTransformation = typeof options?.transform !== 'undefined'\n    const renderPath = wantsTransformation ? 'render/image' : 'object'\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\n\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery)\n    }\n\n    let queryString = _queryString.join('&')\n    if (queryString !== '') {\n      queryString = `?${queryString}`\n    }\n\n    return {\n      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n   */\n  async remove(\n    paths: string[]\n  ): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private _getFinalPath(path: string) {\n    return `${this.bucketId}/${path}`\n  }\n\n  private _removeEmptyFolders(path: string) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\n  }\n\n  private transformOptsToQueryString(transform: TransformOptions) {\n    const params = []\n    if (transform.width) {\n      params.push(`width=${transform.width}`)\n    }\n\n    if (transform.height) {\n      params.push(`height=${transform.height}`)\n    }\n\n    if (transform.resize) {\n      params.push(`resize=${transform.resize}`)\n    }\n\n    if (transform.format) {\n      params.push(`format=${transform.format}`)\n    }\n\n    if (transform.quality) {\n      params.push(`quality=${transform.quality}`)\n    }\n\n    return params.join('&')\n  }\n}\n","import { version } from './version'\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `storage-js/${version}` }\n","// generated by genversion\nexport const version = '2.5.1'\n","import { DEFAULT_HEADERS } from '../lib/constants'\nimport { isStorageError, StorageError } from '../lib/errors'\nimport { Fetch, get, post, put, remove } from '../lib/fetch'\nimport { resolveFetch } from '../lib/helpers'\nimport { Bucket } from '../lib/types'\n\nexport default class StorageBucketApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch: Fetch\n\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n  async listBuckets(): Promise<\n    | {\n        data: Bucket[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n  async getBucket(\n    id: string\n  ): Promise<\n    | {\n        data: Bucket\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   * @returns newly created bucket id\n   */\n  async createBucket(\n    id: string,\n    options: {\n      public: boolean\n      fileSizeLimit?: number | string | null\n      allowedMimeTypes?: string[] | null\n    } = {\n      public: false,\n    }\n  ): Promise<\n    | {\n        data: Pick<Bucket, 'name'>\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket`,\n        {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates a Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are updating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   */\n  async updateBucket(\n    id: string,\n    options: {\n      public: boolean\n      fileSizeLimit?: number | string | null\n      allowedMimeTypes?: string[] | null\n    }\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await put(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n  async emptyBucket(\n    id: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket/${id}/empty`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n  async deleteBucket(\n    id: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n","import StorageFileApi from './packages/StorageFileApi'\nimport StorageBucketApi from './packages/StorageBucketApi'\nimport { Fetch } from './lib/fetch'\n\nexport class StorageClient extends StorageBucketApi {\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    super(url, headers, fetch)\n  }\n\n  /**\n   * Perform file operation in a bucket.\n   *\n   * @param id The bucket id to operate on.\n   */\n  from(id: string): StorageFileApi {\n    return new StorageFileApi(this.url, this.headers, id, this.fetch)\n  }\n}\n","// constants.ts\nimport { version } from './version'\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `supabase-js/${version}` }\n","export const version = '2.24.0'\n","import crossFetch, { Headers as CrossFetchHeaders } from 'cross-fetch'\n\ntype Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = crossFetch as unknown as Fetch\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n\nexport const resolveHeadersConstructor = () => {\n  if (typeof Headers === 'undefined') {\n    return CrossFetchHeaders\n  }\n\n  return Headers\n}\n\nexport const fetchWithAuth = (\n  supabaseKey: string,\n  getAccessToken: () => Promise<string | null>,\n  customFetch?: Fetch\n): Fetch => {\n  const fetch = resolveFetch(customFetch)\n  const HeadersConstructor = resolveHeadersConstructor()\n\n  return async (input, init) => {\n    const accessToken = (await getAccessToken()) ?? supabaseKey\n    let headers = new HeadersConstructor(init?.headers)\n\n    if (!headers.has('apikey')) {\n      headers.set('apikey', supabaseKey)\n    }\n\n    if (!headers.has('Authorization')) {\n      headers.set('Authorization', `Bearer ${accessToken}`)\n    }\n\n    return fetch(input, { ...init, headers })\n  }\n}\n","import { SupportedStorage } from './types'\nexport function expiresAt(expiresIn: number) {\n  const timeNow = Math.round(Date.now() / 1000)\n  return timeNow + expiresIn\n}\n\nexport function uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n\nexport const isBrowser = () => typeof document !== 'undefined'\n\nconst localStorageWriteTests = {\n  tested: false,\n  writable: false,\n}\n\n/**\n * Checks whether localStorage is supported on this browser.\n */\nexport const supportsLocalStorage = () => {\n  if (!isBrowser()) {\n    return false\n  }\n\n  try {\n    if (typeof globalThis.localStorage !== 'object') {\n      return false\n    }\n  } catch (e) {\n    // DOM exception when accessing `localStorage`\n    return false\n  }\n\n  if (localStorageWriteTests.tested) {\n    return localStorageWriteTests.writable\n  }\n\n  const randomKey = `lswt-${Math.random()}${Math.random()}`\n\n  try {\n    globalThis.localStorage.setItem(randomKey, randomKey)\n    globalThis.localStorage.removeItem(randomKey)\n\n    localStorageWriteTests.tested = true\n    localStorageWriteTests.writable = true\n  } catch (e) {\n    // localStorage can't be written to\n    // https://www.chromium.org/for-testers/bug-reporting-guidelines/uncaught-securityerror-failed-to-read-the-localstorage-property-from-window-access-is-denied-for-this-document\n\n    localStorageWriteTests.tested = true\n    localStorageWriteTests.writable = false\n  }\n\n  return localStorageWriteTests.writable\n}\n\nexport function getParameterByName(name: string, url?: string) {\n  if (!url) url = window?.location?.href || ''\n  // eslint-disable-next-line no-useless-escape\n  name = name.replace(/[\\[\\]]/g, '\\\\$&')\n  const regex = new RegExp('[?&#]' + name + '(=([^&#]*)|&|#|$)'),\n    results = regex.exec(url)\n  if (!results) return null\n  if (!results[2]) return ''\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '))\n}\n\ntype Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n\nexport const looksLikeFetchResponse = (maybeResponse: unknown): maybeResponse is Response => {\n  return (\n    typeof maybeResponse === 'object' &&\n    maybeResponse !== null &&\n    'status' in maybeResponse &&\n    'ok' in maybeResponse &&\n    'json' in maybeResponse &&\n    typeof (maybeResponse as any).json === 'function'\n  )\n}\n\n// Storage helpers\nexport const setItemAsync = async (\n  storage: SupportedStorage,\n  key: string,\n  data: any\n): Promise<void> => {\n  await storage.setItem(key, JSON.stringify(data))\n}\n\nexport const getItemAsync = async (storage: SupportedStorage, key: string): Promise<unknown> => {\n  const value = await storage.getItem(key)\n\n  if (!value) {\n    return null\n  }\n\n  try {\n    return JSON.parse(value)\n  } catch {\n    return value\n  }\n}\n\nexport const removeItemAsync = async (storage: SupportedStorage, key: string): Promise<void> => {\n  await storage.removeItem(key)\n}\n\nexport function decodeBase64URL(value: string): string {\n  const key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n  let base64 = ''\n  let chr1, chr2, chr3\n  let enc1, enc2, enc3, enc4\n  let i = 0\n  value = value.replace('-', '+').replace('_', '/')\n\n  while (i < value.length) {\n    enc1 = key.indexOf(value.charAt(i++))\n    enc2 = key.indexOf(value.charAt(i++))\n    enc3 = key.indexOf(value.charAt(i++))\n    enc4 = key.indexOf(value.charAt(i++))\n    chr1 = (enc1 << 2) | (enc2 >> 4)\n    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2)\n    chr3 = ((enc3 & 3) << 6) | enc4\n    base64 = base64 + String.fromCharCode(chr1)\n\n    if (enc3 != 64 && chr2 != 0) {\n      base64 = base64 + String.fromCharCode(chr2)\n    }\n    if (enc4 != 64 && chr3 != 0) {\n      base64 = base64 + String.fromCharCode(chr3)\n    }\n  }\n  return base64\n}\n\n/**\n * A deferred represents some asynchronous work that is not yet finished, which\n * may or may not culminate in a value.\n * Taken from: https://github.com/mike-north/types/blob/master/src/async.ts\n */\nexport class Deferred<T = any> {\n  public static promiseConstructor: PromiseConstructor = Promise\n\n  public readonly promise!: PromiseLike<T>\n\n  public readonly resolve!: (value?: T | PromiseLike<T>) => void\n\n  public readonly reject!: (reason?: any) => any\n\n  public constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-extra-semi\n    ;(this as any).promise = new Deferred.promiseConstructor((res, rej) => {\n      // eslint-disable-next-line @typescript-eslint/no-extra-semi\n      ;(this as any).resolve = res\n      // eslint-disable-next-line @typescript-eslint/no-extra-semi\n      ;(this as any).reject = rej\n    })\n  }\n}\n\n// Taken from: https://stackoverflow.com/questions/38552003/how-to-decode-jwt-token-in-javascript-without-using-a-library\nexport function decodeJWTPayload(token: string) {\n  // Regex checks for base64url format\n  const base64UrlRegex = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}=?$|[a-z0-9_-]{2}(==)?$)$/i\n\n  const parts = token.split('.')\n\n  if (parts.length !== 3) {\n    throw new Error('JWT is not valid: not a JWT structure')\n  }\n\n  if (!base64UrlRegex.test(parts[1])) {\n    throw new Error('JWT is not valid: payload is not in base64url format')\n  }\n\n  const base64Url = parts[1]\n  return JSON.parse(decodeBase64URL(base64Url))\n}\n\n/**\n * Creates a promise that resolves to null after some time.\n */\nexport function sleep(time: number): Promise<null> {\n  return new Promise((accept) => {\n    setTimeout(() => accept(null), time)\n  })\n}\n\n/**\n * Converts the provided async function into a retryable function. Each result\n * or thrown error is sent to the isRetryable function which should return true\n * if the function should run again.\n */\nexport function retryable<T>(\n  fn: (attempt: number) => Promise<T>,\n  isRetryable: (attempt: number, error: any | null, result?: T) => boolean\n): Promise<T> {\n  const promise = new Promise<T>((accept, reject) => {\n    // eslint-disable-next-line @typescript-eslint/no-extra-semi\n    ;(async () => {\n      for (let attempt = 0; attempt < Infinity; attempt++) {\n        try {\n          const result = await fn(attempt)\n\n          if (!isRetryable(attempt, null, result)) {\n            accept(result)\n            return\n          }\n        } catch (e: any) {\n          if (!isRetryable(attempt, e)) {\n            reject(e)\n            return\n          }\n        }\n      }\n    })()\n  })\n\n  return promise\n}\n\nfunction dec2hex(dec: number) {\n  return ('0' + dec.toString(16)).substr(-2)\n}\n\n// Functions below taken from: https://stackoverflow.com/questions/63309409/creating-a-code-verifier-and-challenge-for-pkce-auth-on-spotify-api-in-reactjs\nexport function generatePKCEVerifier() {\n  const verifierLength = 56\n  const array = new Uint32Array(verifierLength)\n  if (typeof crypto === 'undefined') {\n    const charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~'\n    const charSetLen = charSet.length\n    let verifier = ''\n    for (let i = 0; i < verifierLength; i++) {\n      verifier += charSet.charAt(Math.floor(Math.random() * charSetLen))\n    }\n    return verifier\n  }\n  crypto.getRandomValues(array)\n  return Array.from(array, dec2hex).join('')\n}\n\nasync function sha256(randomString: string) {\n  const encoder = new TextEncoder()\n  const encodedData = encoder.encode(randomString)\n  const hash = await crypto.subtle.digest('SHA-256', encodedData)\n  const bytes = new Uint8Array(hash)\n\n  return Array.from(bytes)\n    .map((c) => String.fromCharCode(c))\n    .join('')\n}\n\nfunction base64urlencode(str: string) {\n  return btoa(str).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '')\n}\n\nexport async function generatePKCEChallenge(verifier: string) {\n  if (typeof crypto === 'undefined') {\n    console.warn(\n      'WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256.'\n    )\n    return verifier\n  }\n  const hashed = await sha256(verifier)\n  return base64urlencode(hashed)\n}\n","export class AuthError extends Error {\n  status: number | undefined\n  protected __isAuthError = true\n\n  constructor(message: string, status?: number) {\n    super(message)\n    this.name = 'AuthError'\n    this.status = status\n  }\n}\n\nexport function isAuthError(error: unknown): error is AuthError {\n  return typeof error === 'object' && error !== null && '__isAuthError' in error\n}\n\nexport class AuthApiError extends AuthError {\n  status: number\n\n  constructor(message: string, status: number) {\n    super(message, status)\n    this.name = 'AuthApiError'\n    this.status = status\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n    }\n  }\n}\n\nexport function isAuthApiError(error: unknown): error is AuthApiError {\n  return isAuthError(error) && error.name === 'AuthApiError'\n}\n\nexport class AuthUnknownError extends AuthError {\n  originalError: unknown\n\n  constructor(message: string, originalError: unknown) {\n    super(message)\n    this.name = 'AuthUnknownError'\n    this.originalError = originalError\n  }\n}\n\nexport class CustomAuthError extends AuthError {\n  name: string\n  status: number\n  constructor(message: string, name: string, status: number) {\n    super(message)\n    this.name = name\n    this.status = status\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n    }\n  }\n}\n\nexport class AuthSessionMissingError extends CustomAuthError {\n  constructor() {\n    super('Auth session missing!', 'AuthSessionMissingError', 400)\n  }\n}\n\nexport class AuthInvalidTokenResponseError extends CustomAuthError {\n  constructor() {\n    super('Auth session or user missing', 'AuthInvalidTokenResponseError', 500)\n  }\n}\n\nexport class AuthInvalidCredentialsError extends CustomAuthError {\n  constructor(message: string) {\n    super(message, 'AuthInvalidCredentialsError', 400)\n  }\n}\n\nexport class AuthImplicitGrantRedirectError extends CustomAuthError {\n  details: { error: string; code: string } | null = null\n  constructor(message: string, details: { error: string; code: string } | null = null) {\n    super(message, 'AuthImplicitGrantRedirectError', 500)\n    this.details = details\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n      details: this.details,\n    }\n  }\n}\n\nexport class AuthPKCEGrantCodeExchangeError extends CustomAuthError {\n  details: { error: string; code: string } | null = null\n  constructor(message: string, details: { error: string; code: string } | null = null) {\n    super(message, 'AuthPKCEGrantCodeExchangeError', 500)\n    this.details = details\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n      details: this.details,\n    }\n  }\n}\n\nexport class AuthRetryableFetchError extends CustomAuthError {\n  constructor(message: string, status: number) {\n    super(message, 'AuthRetryableFetchError', status)\n  }\n}\n","import { expiresAt, looksLikeFetchResponse } from './helpers'\nimport {\n  AuthResponse,\n  SSOResponse,\n  GenerateLinkProperties,\n  GenerateLinkResponse,\n  User,\n  UserResponse,\n} from './types'\nimport { AuthApiError, AuthRetryableFetchError, AuthUnknownError } from './errors'\n\nexport type Fetch = typeof fetch\n\nexport interface FetchOptions {\n  headers?: {\n    [key: string]: string\n  }\n  noResolveJson?: boolean\n}\n\nexport interface FetchParameters {\n  signal?: AbortSignal\n}\n\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\nconst _getErrorMessage = (err: any): string =>\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\n\nconst handleError = async (error: unknown, reject: (reason?: any) => void) => {\n  const NETWORK_ERROR_CODES = [502, 503, 504]\n  if (!looksLikeFetchResponse(error)) {\n    reject(new AuthRetryableFetchError(_getErrorMessage(error), 0))\n  } else if (NETWORK_ERROR_CODES.includes(error.status)) {\n    // status in 500...599 range - server had an error, request might be retryed.\n    reject(new AuthRetryableFetchError(_getErrorMessage(error), error.status))\n  } else {\n    // got a response from server that is not in the 500...599 range - should not retry\n    error\n      .json()\n      .then((err) => {\n        reject(new AuthApiError(_getErrorMessage(err), error.status || 500))\n      })\n      .catch((e) => {\n        // not a valid json response\n        reject(new AuthUnknownError(_getErrorMessage(e), e))\n      })\n  }\n}\n\nconst _getRequestParams = (\n  method: RequestMethodType,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n) => {\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\n\n  if (method === 'GET') {\n    return params\n  }\n\n  params.headers = { 'Content-Type': 'application/json;charset=UTF-8', ...options?.headers }\n  params.body = JSON.stringify(body)\n  return { ...params, ...parameters }\n}\n\ninterface GotrueRequestOptions extends FetchOptions {\n  jwt?: string\n  redirectTo?: string\n  body?: object\n  query?: { [key: string]: string }\n  /**\n   * Function that transforms api response from gotrue into a desirable / standardised format\n   */\n  xform?: (data: any) => any\n}\n\nexport async function _request(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: GotrueRequestOptions\n) {\n  const headers = { ...options?.headers }\n  if (options?.jwt) {\n    headers['Authorization'] = `Bearer ${options.jwt}`\n  }\n  const qs = options?.query ?? {}\n  if (options?.redirectTo) {\n    qs['redirect_to'] = options.redirectTo\n  }\n  const queryString = Object.keys(qs).length ? '?' + new URLSearchParams(qs).toString() : ''\n  const data = await _handleRequest(\n    fetcher,\n    method,\n    url + queryString,\n    { headers, noResolveJson: options?.noResolveJson },\n    {},\n    options?.body\n  )\n  return options?.xform ? options?.xform(data) : { data: { ...data }, error: null }\n}\n\nasync function _handleRequest(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    fetcher(url, _getRequestParams(method, options, parameters, body))\n      .then((result) => {\n        if (!result.ok) throw result\n        if (options?.noResolveJson) return result\n        return result.json()\n      })\n      .then((data) => resolve(data))\n      .catch((error) => handleError(error, reject))\n  })\n}\n\nexport function _sessionResponse(data: any): AuthResponse {\n  let session = null\n  if (hasSession(data)) {\n    session = { ...data }\n    session.expires_at = expiresAt(data.expires_in)\n  }\n  const user: User = data.user ?? (data as User)\n  return { data: { session, user }, error: null }\n}\n\nexport function _userResponse(data: any): UserResponse {\n  const user: User = data.user ?? (data as User)\n  return { data: { user }, error: null }\n}\n\nexport function _ssoResponse(data: any): SSOResponse {\n  return { data, error: null }\n}\n\nexport function _generateLinkResponse(data: any): GenerateLinkResponse {\n  const { action_link, email_otp, hashed_token, redirect_to, verification_type, ...rest } = data\n\n  const properties: GenerateLinkProperties = {\n    action_link,\n    email_otp,\n    hashed_token,\n    redirect_to,\n    verification_type,\n  }\n\n  const user: User = { ...rest }\n  return {\n    data: {\n      properties,\n      user,\n    },\n    error: null,\n  }\n}\n\nexport function _noResolveJsonResponse(data: any): Response {\n  return data\n}\n\n/**\n * hasSession checks if the response object contains a valid session\n * @param data A response object\n * @returns true if a session is in the response\n */\nfunction hasSession(data: any): boolean {\n  return data.access_token && data.refresh_token && data.expires_in\n}\n","import {\n  Fetch,\n  _generateLinkResponse,\n  _noResolveJsonResponse,\n  _request,\n  _userResponse,\n} from './lib/fetch'\nimport { resolveFetch } from './lib/helpers'\nimport {\n  AdminUserAttributes,\n  GenerateLinkParams,\n  GenerateLinkResponse,\n  Pagination,\n  User,\n  UserResponse,\n  GoTrueAdminMFAApi,\n  AuthMFAAdminDeleteFactorParams,\n  AuthMFAAdminDeleteFactorResponse,\n  AuthMFAAdminListFactorsParams,\n  AuthMFAAdminListFactorsResponse,\n  PageParams,\n} from './lib/types'\nimport { AuthError, isAuthError } from './lib/errors'\n\nexport default class GoTrueAdminApi {\n  /** Contains all MFA administration methods. */\n  mfa: GoTrueAdminMFAApi\n\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  constructor({\n    url = '',\n    headers = {},\n    fetch,\n  }: {\n    url: string\n    headers?: {\n      [key: string]: string\n    }\n    fetch?: Fetch\n  }) {\n    this.url = url\n    this.headers = headers\n    this.fetch = resolveFetch(fetch)\n    this.mfa = {\n      listFactors: this._listFactors.bind(this),\n      deleteFactor: this._deleteFactor.bind(this),\n    }\n  }\n\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   */\n  async signOut(jwt: string): Promise<{ data: null; error: AuthError | null }> {\n    try {\n      await _request(this.fetch, 'POST', `${this.url}/logout`, {\n        headers: this.headers,\n        jwt,\n        noResolveJson: true,\n      })\n      return { data: null, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param options Additional options to be included when inviting.\n   */\n  async inviteUserByEmail(\n    email: string,\n    options: {\n      /** A custom data object to store additional metadata about the user. This maps to the `auth.users.user_metadata` column. */\n      data?: object\n\n      /** The URL which will be appended to the email link sent to the user's email address. Once clicked the user will end up on this URL. */\n      redirectTo?: string\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/invite`, {\n        body: { email, data: options.data },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates email links and OTPs to be sent via a custom email provider.\n   * @param email The user's email.\n   * @param options.password User password. For signup only.\n   * @param options.data Optional user metadata. For signup only.\n   * @param options.redirectTo The redirect url which should be appended to the generated link\n   */\n  async generateLink(params: GenerateLinkParams): Promise<GenerateLinkResponse> {\n    try {\n      const { options, ...rest } = params\n      const body: any = { ...rest, ...options }\n      if ('newEmail' in rest) {\n        // replace newEmail with new_email in request body\n        body.new_email = rest?.newEmail\n        delete body['newEmail']\n      }\n      return await _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n        body: body,\n        headers: this.headers,\n        xform: _generateLinkResponse,\n        redirectTo: options?.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            properties: null,\n            user: null,\n          },\n          error,\n        }\n      }\n      throw error\n    }\n  }\n\n  // User Admin API\n  /**\n   * Creates a new user.\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async createUser(attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n   */\n  async listUsers(\n    params?: PageParams\n  ): Promise<\n    | { data: { users: User[]; aud: string } & Pagination; error: null }\n    | { data: { users: [] }; error: AuthError }\n  > {\n    try {\n      const pagination: Pagination = { nextPage: null, lastPage: 0, total: 0 }\n      const response = await _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n        headers: this.headers,\n        noResolveJson: true,\n        query: {\n          page: params?.page?.toString() ?? '',\n          per_page: params?.perPage?.toString() ?? '',\n        },\n        xform: _noResolveJsonResponse,\n      })\n      if (response.error) throw response.error\n\n      const users = await response.json()\n      const total = response.headers.get('x-total-count') ?? 0\n      const links = response.headers.get('link')?.split(',') ?? []\n      if (links.length > 0) {\n        links.forEach((link: string) => {\n          const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1))\n          const rel = JSON.parse(link.split(';')[1].split('=')[1])\n          pagination[`${rel}Page`] = page\n        })\n\n        pagination.total = parseInt(total)\n      }\n      return { data: { ...users, ...pagination }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { users: [] }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async getUserById(uid: string): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async updateUserById(uid: string, attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * @param id The user id you want to remove.\n   * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema.\n   * Defaults to false for backward compatibility.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async deleteUser(id: string, shouldSoftDelete = false): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n        headers: this.headers,\n        body: {\n          should_soft_delete: shouldSoftDelete,\n        },\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _listFactors(\n    params: AuthMFAAdminListFactorsParams\n  ): Promise<AuthMFAAdminListFactorsResponse> {\n    try {\n      const { data, error } = await _request(\n        this.fetch,\n        'GET',\n        `${this.url}/admin/users/${params.userId}/factors`,\n        {\n          headers: this.headers,\n          xform: (factors: any) => {\n            return { data: { factors }, error: null }\n          },\n        }\n      )\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _deleteFactor(\n    params: AuthMFAAdminDeleteFactorParams\n  ): Promise<AuthMFAAdminDeleteFactorResponse> {\n    try {\n      const data = await _request(\n        this.fetch,\n        'DELETE',\n        `${this.url}/admin/users/${params.userId}/factors/${params.id}`,\n        {\n          headers: this.headers,\n        }\n      )\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n","import { version } from './version'\nexport const GOTRUE_URL = 'http://localhost:9999'\nexport const STORAGE_KEY = 'supabase.auth.token'\nexport const AUDIENCE = ''\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `gotrue-js/${version}` }\nexport const EXPIRY_MARGIN = 10 // in seconds\nexport const NETWORK_FAILURE = {\n  MAX_RETRIES: 10,\n  RETRY_INTERVAL: 2, // in deciseconds\n}\n","// Generated by genversion.\nexport const version = '2.29.0'\n","import { supportsLocalStorage } from './helpers'\nimport { SupportedStorage } from './types'\n\nconst localStorageAdapter: SupportedStorage = {\n  getItem: (key) => {\n    if (!supportsLocalStorage()) {\n      return null\n    }\n\n    return globalThis.localStorage.getItem(key)\n  },\n  setItem: (key, value) => {\n    if (!supportsLocalStorage()) {\n      return\n    }\n\n    globalThis.localStorage.setItem(key, value)\n  },\n  removeItem: (key) => {\n    if (!supportsLocalStorage()) {\n      return\n    }\n\n    globalThis.localStorage.removeItem(key)\n  },\n}\n\nexport default localStorageAdapter\n","/**\n * https://mathiasbynens.be/notes/globalthis\n */\nexport function polyfillGlobalThis() {\n  if (typeof globalThis === 'object') return\n  try {\n    Object.defineProperty(Object.prototype, '__magic__', {\n      get: function () {\n        return this\n      },\n      configurable: true,\n    })\n    // @ts-expect-error 'Allow access to magic'\n    __magic__.globalThis = __magic__\n    // @ts-expect-error 'Allow access to magic'\n    delete Object.prototype.__magic__\n  } catch (e) {\n    if (typeof self !== 'undefined') {\n      // @ts-expect-error 'Allow access to globals'\n      self.globalThis = self\n    }\n  }\n}\n","import GoTrueAdminApi from './GoTrueAdminApi'\nimport { DEFAULT_HEADERS, EXPIRY_MARGIN, GOTRUE_URL, STORAGE_KEY } from './lib/constants'\nimport {\n  AuthError,\n  AuthImplicitGrantRedirectError,\n  AuthPKCEGrantCodeExchangeError,\n  AuthInvalidCredentialsError,\n  AuthRetryableFetchError,\n  AuthSessionMissingError,\n  AuthInvalidTokenResponseError,\n  AuthUnknownError,\n  isAuthApiError,\n  isAuthError,\n} from './lib/errors'\nimport { Fetch, _request, _sessionResponse, _userResponse, _ssoResponse } from './lib/fetch'\nimport {\n  decodeJWTPayload,\n  Deferred,\n  getItemAsync,\n  getParameterByName,\n  isBrowser,\n  removeItemAsync,\n  resolveFetch,\n  setItemAsync,\n  uuid,\n  retryable,\n  sleep,\n  generatePKCEVerifier,\n  generatePKCEChallenge,\n  supportsLocalStorage,\n} from './lib/helpers'\nimport localStorageAdapter from './lib/local-storage'\nimport { polyfillGlobalThis } from './lib/polyfills'\n\nimport type {\n  AuthChangeEvent,\n  AuthResponse,\n  AuthTokenResponse,\n  CallRefreshTokenResult,\n  GoTrueClientOptions,\n  InitializeResult,\n  OAuthResponse,\n  SSOResponse,\n  Provider,\n  Session,\n  SignInWithIdTokenCredentials,\n  SignInWithOAuthCredentials,\n  SignInWithPasswordCredentials,\n  SignInWithPasswordlessCredentials,\n  SignUpWithPasswordCredentials,\n  SignInWithSSO,\n  Subscription,\n  SupportedStorage,\n  User,\n  UserAttributes,\n  UserResponse,\n  VerifyOtpParams,\n  GoTrueMFAApi,\n  MFAEnrollParams,\n  AuthMFAEnrollResponse,\n  MFAChallengeParams,\n  AuthMFAChallengeResponse,\n  MFAUnenrollParams,\n  AuthMFAUnenrollResponse,\n  MFAVerifyParams,\n  AuthMFAVerifyResponse,\n  AuthMFAListFactorsResponse,\n  AMREntry,\n  AuthMFAGetAuthenticatorAssuranceLevelResponse,\n  AuthenticatorAssuranceLevels,\n  Factor,\n  MFAChallengeAndVerifyParams,\n  ResendParams,\n  AuthFlowType,\n} from './lib/types'\n\npolyfillGlobalThis() // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS: Omit<Required<GoTrueClientOptions>, 'fetch' | 'storage'> = {\n  url: GOTRUE_URL,\n  storageKey: STORAGE_KEY,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  headers: DEFAULT_HEADERS,\n  flowType: 'implicit',\n}\n\n/** Current session will be checked for refresh at this interval. */\nconst AUTO_REFRESH_TICK_DURATION = 30 * 1000\n\n/**\n * A token refresh will be attempted this many ticks before the current session expires. */\nconst AUTO_REFRESH_TICK_THRESHOLD = 3\n\nexport default class GoTrueClient {\n  /**\n   * Namespace for the GoTrue admin methods.\n   * These methods should only be used in a trusted server-side environment.\n   */\n  admin: GoTrueAdminApi\n  /**\n   * Namespace for the MFA methods.\n   */\n  mfa: GoTrueMFAApi\n  /**\n   * The storage key used to identify the values saved in localStorage\n   */\n  protected storageKey: string\n\n  /**\n   * The session object for the currently logged in user. If null, it means there isn't a logged-in user.\n   * Only used if persistSession is false.\n   */\n  protected inMemorySession: Session | null\n\n  protected flowType: AuthFlowType\n\n  protected autoRefreshToken: boolean\n  protected persistSession: boolean\n  protected storage: SupportedStorage\n  protected stateChangeEmitters: Map<string, Subscription> = new Map()\n  protected autoRefreshTicker: ReturnType<typeof setInterval> | null = null\n  protected visibilityChangedCallback: (() => Promise<any>) | null = null\n  protected refreshingDeferred: Deferred<CallRefreshTokenResult> | null = null\n  /**\n   * Keeps track of the async client initialization.\n   * When null or not yet resolved the auth state is `unknown`\n   * Once resolved the the auth state is known and it's save to call any further client methods.\n   * Keep extra care to never reject or throw uncaught errors\n   */\n  protected initializePromise: Promise<InitializeResult> | null = null\n  protected detectSessionInUrl = true\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  /**\n   * Used to broadcast state change events to other tabs listening.\n   */\n  protected broadcastChannel: BroadcastChannel | null = null\n\n  /**\n   * Create a new client for use in the browser.\n   */\n  constructor(options: GoTrueClientOptions) {\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n    this.inMemorySession = null\n    this.storageKey = settings.storageKey\n    this.autoRefreshToken = settings.autoRefreshToken\n    this.persistSession = settings.persistSession\n    this.storage = settings.storage || localStorageAdapter\n    this.admin = new GoTrueAdminApi({\n      url: settings.url,\n      headers: settings.headers,\n      fetch: settings.fetch,\n    })\n\n    this.url = settings.url\n    this.headers = settings.headers\n    this.fetch = resolveFetch(settings.fetch)\n    this.detectSessionInUrl = settings.detectSessionInUrl\n    this.flowType = settings.flowType\n\n    this.mfa = {\n      verify: this._verify.bind(this),\n      enroll: this._enroll.bind(this),\n      unenroll: this._unenroll.bind(this),\n      challenge: this._challenge.bind(this),\n      listFactors: this._listFactors.bind(this),\n      challengeAndVerify: this._challengeAndVerify.bind(this),\n      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this),\n    }\n\n    if (this.persistSession && this.storage === localStorageAdapter && !supportsLocalStorage()) {\n      console.warn(\n        `No storage option exists to persist the session, which may result in unexpected behavior when using auth.\n        If you want to set persistSession to true, please provide a storage option or you may set persistSession to false to disable this warning.`\n      )\n    }\n\n    if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\n      try {\n        this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey)\n      } catch (e: any) {\n        console.error(\n          'Failed to create a new BroadcastChannel, multi-tab state changes will not be available',\n          e\n        )\n      }\n\n      this.broadcastChannel?.addEventListener('message', (event) => {\n        this._notifyAllSubscribers(event.data.event, event.data.session, false) // broadcast = false so we don't get an endless loop of messages\n      })\n    }\n\n    this.initialize()\n  }\n\n  /**\n   * Initializes the client session either from the url or from storage.\n   * This method is automatically called when instantiating the client, but should also be called\n   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n   */\n  initialize(): Promise<InitializeResult> {\n    if (!this.initializePromise) {\n      this.initializePromise = this._initialize()\n    }\n\n    return this.initializePromise\n  }\n\n  /**\n   * IMPORTANT:\n   * 1. Never throw in this method, as it is called from the constructor\n   * 2. Never return a session from this method as it would be cached over\n   *    the whole lifetime of the client\n   */\n  private async _initialize(): Promise<InitializeResult> {\n    if (this.initializePromise) {\n      return this.initializePromise\n    }\n\n    try {\n      const isPKCEFlow = isBrowser() ? await this._isPKCEFlow() : false\n      if (isPKCEFlow || (this.detectSessionInUrl && this._isImplicitGrantFlow())) {\n        const { data, error } = await this._getSessionFromUrl(isPKCEFlow)\n        if (error) {\n          // failed login attempt via url,\n          // remove old session as in verifyOtp, signUp and signInWith*\n          await this._removeSession()\n\n          return { error }\n        }\n\n        const { session, redirectType } = data\n\n        await this._saveSession(session)\n\n        setTimeout(() => {\n          if (redirectType === 'recovery') {\n            this._notifyAllSubscribers('PASSWORD_RECOVERY', session)\n          } else {\n            this._notifyAllSubscribers('SIGNED_IN', session)\n          }\n        }, 0)\n\n        return { error: null }\n      }\n\n      // no login attempt via callback url try to recover session from storage\n      await this._recoverAndRefresh()\n      return { error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { error }\n      }\n\n      return {\n        error: new AuthUnknownError('Unexpected error during initialization', error),\n      }\n    } finally {\n      await this._handleVisibilityChange()\n    }\n  }\n\n  /**\n   * Creates a new user.\n   *\n   * Be aware that if a user account exists in the system you may get back an\n   * error message that attempts to hide this information from the user.\n   * This method has support for PKCE via email signups. The PKCE flow cannot be used when autoconfirm is enabled.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n  async signUp(credentials: SignUpWithPasswordCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponse\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        let codeChallenge: string | null = null\n        let codeChallengeMethod: string | null = null\n        if (this.flowType === 'pkce') {\n          const codeVerifier = generatePKCEVerifier()\n          await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier)\n          codeChallenge = await generatePKCEChallenge(codeVerifier)\n          codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256'\n        }\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          redirectTo: options?.emailRedirectTo,\n          body: {\n            email,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n            code_challenge: codeChallenge,\n            code_challenge_method: codeChallengeMethod,\n          },\n          xform: _sessionResponse,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            data: options?.data ?? {},\n            channel: options?.channel ?? 'sms',\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n\n      const { data, error } = res\n\n      if (error || !data) {\n        return { data: { user: null, session: null }, error: error }\n      }\n\n      const session: Session | null = data.session\n      const user: User | null = data.user\n\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user with an email and password or phone and password.\n   *\n   * Be aware that you may get back an error message that will not distinguish\n   * between the cases where the account does not exist or that the\n   * email/phone and password combination is wrong or that the account can only\n   * be accessed via social login.\n   */\n  async signInWithPassword(credentials: SignInWithPasswordCredentials): Promise<AuthTokenResponse> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponse\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            email,\n            password,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n      const { data, error } = res\n\n      if (error) {\n        return { data: { user: null, session: null }, error }\n      } else if (!data || !data.session || !data.user) {\n        return { data: { user: null, session: null }, error: new AuthInvalidTokenResponseError() }\n      }\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', data.session)\n      }\n      return { data: { user: data.user, session: data.session }, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user via a third-party provider.\n   * This method supports the PKCE flow.\n   */\n  async signInWithOAuth(credentials: SignInWithOAuthCredentials): Promise<OAuthResponse> {\n    await this._removeSession()\n\n    return await this._handleProviderSignIn(credentials.provider, {\n      redirectTo: credentials.options?.redirectTo,\n      scopes: credentials.options?.scopes,\n      queryParams: credentials.options?.queryParams,\n      skipBrowserRedirect: credentials.options?.skipBrowserRedirect,\n    })\n  }\n\n  /**\n   * Log in an existing user by exchanging an Auth Code issued during the PKCE flow.\n   */\n  async exchangeCodeForSession(authCode: string): Promise<AuthTokenResponse> {\n    const codeVerifier = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`)\n    const { data, error } = await _request(\n      this.fetch,\n      'POST',\n      `${this.url}/token?grant_type=pkce`,\n      {\n        headers: this.headers,\n        body: {\n          auth_code: authCode,\n          code_verifier: codeVerifier,\n        },\n        xform: _sessionResponse,\n      }\n    )\n    await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`)\n    if (error) {\n      return { data: { user: null, session: null }, error }\n    } else if (!data || !data.session || !data.user) {\n      return { data: { user: null, session: null }, error: new AuthInvalidTokenResponseError() }\n    }\n    if (data.session) {\n      await this._saveSession(data.session)\n      this._notifyAllSubscribers('SIGNED_IN', data.session)\n    }\n    return { data, error }\n  }\n\n  /**\n   * Allows signing in with an ID token issued by certain supported providers.\n   * The ID token is verified for validity and a new session is established.\n   *\n   * @experimental\n   */\n  async signInWithIdToken(credentials: SignInWithIdTokenCredentials): Promise<AuthTokenResponse> {\n    await this._removeSession()\n\n    try {\n      const { options, provider, token, nonce } = credentials\n\n      const res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\n        headers: this.headers,\n        body: {\n          provider,\n          id_token: token,\n          nonce,\n          gotrue_meta_security: { captcha_token: options?.captchaToken },\n        },\n        xform: _sessionResponse,\n      })\n\n      const { data, error } = res\n      if (error) {\n        return { data: { user: null, session: null }, error }\n      } else if (!data || !data.session || !data.user) {\n        return {\n          data: { user: null, session: null },\n          error: new AuthInvalidTokenResponseError(),\n        }\n      }\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', data.session)\n      }\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Log in a user using magiclink or a one-time password (OTP).\n   *\n   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n   *\n   * Be aware that you may get back an error message that will not distinguish\n   * between the cases where the account does not exist or, that the account\n   * can only be accessed via social login.\n   *\n   * Do note that you will need to configure a Whatsapp sender on Twilio\n   * if you are using phone sign in with the 'whatsapp' channel. The whatsapp\n   * channel is not supported on other providers\n   * at this time.\n   * This method supports PKCE when an email is passed.\n   */\n  async signInWithOtp(credentials: SignInWithPasswordlessCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      if ('email' in credentials) {\n        const { email, options } = credentials\n        let codeChallenge: string | null = null\n        let codeChallengeMethod: string | null = null\n        if (this.flowType === 'pkce') {\n          const codeVerifier = generatePKCEVerifier()\n          await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier)\n          codeChallenge = await generatePKCEChallenge(codeVerifier)\n          codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256'\n        }\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            email,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n            code_challenge: codeChallenge,\n            code_challenge_method: codeChallengeMethod,\n          },\n          redirectTo: options?.emailRedirectTo,\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      if ('phone' in credentials) {\n        const { phone, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            phone,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n            channel: options?.channel ?? 'sms',\n          },\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      throw new AuthInvalidCredentialsError('You must provide either an email or phone number.')\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   */\n  async verifyOtp(params: VerifyOtpParams): Promise<AuthResponse> {\n    try {\n      if (params.type !== 'email_change' && params.type !== 'phone_change') {\n        // we don't want to remove the authenticated session if the user is performing an email_change or phone_change verification\n        await this._removeSession()\n      }\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/verify`, {\n        headers: this.headers,\n        body: {\n          ...params,\n          gotrue_meta_security: { captcha_token: params.options?.captchaToken },\n        },\n        redirectTo: params.options?.redirectTo,\n        xform: _sessionResponse,\n      })\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw new Error('An error occurred on token verification.')\n      }\n\n      const session: Session | null = data.session\n      const user: User = data.user\n\n      if (session?.access_token) {\n        await this._saveSession(session as Session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Attempts a single-sign on using an enterprise Identity Provider. A\n   * successful SSO attempt will redirect the current page to the identity\n   * provider authorization page. The redirect URL is implementation and SSO\n   * protocol specific.\n   *\n   * You can use it by providing a SSO domain. Typically you can extract this\n   * domain by asking users for their email address. If this domain is\n   * registered on the Auth instance the redirect will use that organization's\n   * currently active SSO Identity Provider for the login.\n   *\n   * If you have built an organization-specific login page, you can use the\n   * organization's SSO Identity Provider UUID directly instead.\n   */\n  async signInWithSSO(params: SignInWithSSO): Promise<SSOResponse> {\n    try {\n      await this._removeSession()\n\n      return await _request(this.fetch, 'POST', `${this.url}/sso`, {\n        body: {\n          ...('providerId' in params ? { provider_id: params.providerId } : null),\n          ...('domain' in params ? { domain: params.domain } : null),\n          redirect_to: params.options?.redirectTo ?? undefined,\n          ...(params?.options?.captchaToken\n            ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } }\n            : null),\n          skip_http_redirect: true, // fetch does not handle redirects\n        },\n        headers: this.headers,\n        xform: _ssoResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Sends a reauthentication OTP to the user's email or phone number.\n   * Requires the user to be signed-in.\n   */\n  async reauthenticate(): Promise<AuthResponse> {\n    try {\n      const {\n        data: { session },\n        error: sessionError,\n      } = await this.getSession()\n      if (sessionError) throw sessionError\n      if (!session) throw new AuthSessionMissingError()\n\n      const { error } = await _request(this.fetch, 'GET', `${this.url}/reauthenticate`, {\n        headers: this.headers,\n        jwt: session.access_token,\n      })\n      return { data: { user: null, session: null }, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Resends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.\n   */\n  async resend(credentials: ResendParams): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n      const endpoint = `${this.url}/resend`\n      if ('email' in credentials) {\n        const { email, type, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', endpoint, {\n          headers: this.headers,\n          body: {\n            email,\n            type,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n        })\n        return { data: { user: null, session: null }, error }\n      } else if ('phone' in credentials) {\n        const { phone, type, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', endpoint, {\n          headers: this.headers,\n          body: {\n            phone,\n            type,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      throw new AuthInvalidCredentialsError(\n        'You must provide either an email or phone number and a type'\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Returns the session, refreshing it if necessary.\n   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n   */\n  async getSession(): Promise<\n    | {\n        data: {\n          session: Session\n        }\n        error: null\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: AuthError\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: null\n      }\n  > {\n    // make sure we've read the session from the url if there is one\n    // save to just await, as long we make sure _initialize() never throws\n    await this.initializePromise\n\n    let currentSession: Session | null = null\n\n    if (this.persistSession) {\n      const maybeSession = await getItemAsync(this.storage, this.storageKey)\n\n      if (maybeSession !== null) {\n        if (this._isValidSession(maybeSession)) {\n          currentSession = maybeSession\n        } else {\n          await this._removeSession()\n        }\n      }\n    } else {\n      currentSession = this.inMemorySession\n    }\n\n    if (!currentSession) {\n      return { data: { session: null }, error: null }\n    }\n\n    const hasExpired = currentSession.expires_at\n      ? currentSession.expires_at <= Date.now() / 1000\n      : false\n    if (!hasExpired) {\n      return { data: { session: currentSession }, error: null }\n    }\n\n    const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n    if (error) {\n      return { data: { session: null }, error }\n    }\n\n    return { data: { session }, error: null }\n  }\n\n  /**\n   * Gets the current user details if there is an existing session.\n   * @param jwt Takes in an optional access token jwt. If no jwt is provided, getUser() will attempt to get the jwt from the current session.\n   */\n  async getUser(jwt?: string): Promise<UserResponse> {\n    try {\n      if (!jwt) {\n        const { data, error } = await this.getSession()\n        if (error) {\n          throw error\n        }\n\n        // Default to Authorization header if there is no existing session\n        jwt = data.session?.access_token ?? undefined\n      }\n\n      return await _request(this.fetch, 'GET', `${this.url}/user`, {\n        headers: this.headers,\n        jwt: jwt,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates user data for a logged in user.\n   */\n  async updateUser(\n    attributes: UserAttributes,\n    options: {\n      emailRedirectTo?: string | undefined\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        throw sessionError\n      }\n      if (!sessionData.session) {\n        throw new AuthSessionMissingError()\n      }\n      const session: Session = sessionData.session\n      const { data, error: userError } = await _request(this.fetch, 'PUT', `${this.url}/user`, {\n        headers: this.headers,\n        redirectTo: options?.emailRedirectTo,\n        body: attributes,\n        jwt: session.access_token,\n        xform: _userResponse,\n      })\n      if (userError) throw userError\n      session.user = data.user as User\n      await this._saveSession(session)\n      this._notifyAllSubscribers('USER_UPDATED', session)\n\n      return { data: { user: session.user }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Decodes a JWT (without performing any validation).\n   */\n  private _decodeJWT(jwt: string): {\n    exp?: number\n    aal?: AuthenticatorAssuranceLevels | null\n    amr?: AMREntry[] | null\n  } {\n    return decodeJWTPayload(jwt)\n  }\n\n  /**\n   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n   * If the refresh token or access token in the current session is invalid, an error will be thrown.\n   * @param currentSession The current session that minimally contains an access token and refresh token.\n   */\n  async setSession(currentSession: {\n    access_token: string\n    refresh_token: string\n  }): Promise<AuthResponse> {\n    try {\n      if (!currentSession.access_token || !currentSession.refresh_token) {\n        throw new AuthSessionMissingError()\n      }\n\n      const timeNow = Date.now() / 1000\n      let expiresAt = timeNow\n      let hasExpired = true\n      let session: Session | null = null\n      const payload = decodeJWTPayload(currentSession.access_token)\n      if (payload.exp) {\n        expiresAt = payload.exp\n        hasExpired = expiresAt <= timeNow\n      }\n\n      if (hasExpired) {\n        const { session: refreshedSession, error } = await this._callRefreshToken(\n          currentSession.refresh_token\n        )\n        if (error) {\n          return { data: { user: null, session: null }, error: error }\n        }\n\n        if (!refreshedSession) {\n          return { data: { user: null, session: null }, error: null }\n        }\n        session = refreshedSession\n      } else {\n        const { data, error } = await this.getUser(currentSession.access_token)\n        if (error) {\n          throw error\n        }\n        session = {\n          access_token: currentSession.access_token,\n          refresh_token: currentSession.refresh_token,\n          user: data.user,\n          token_type: 'bearer',\n          expires_in: expiresAt - timeNow,\n          expires_at: expiresAt,\n        }\n        await this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user: session.user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Returns a new session, regardless of expiry status.\n   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n   * If the current session's refresh token is invalid, an error will be thrown.\n   * @param currentSession The current session. If passed in, it must contain a refresh token.\n   */\n  async refreshSession(currentSession?: { refresh_token: string }): Promise<AuthResponse> {\n    try {\n      if (!currentSession) {\n        const { data, error } = await this.getSession()\n        if (error) {\n          throw error\n        }\n\n        currentSession = data.session ?? undefined\n      }\n\n      if (!currentSession?.refresh_token) {\n        throw new AuthSessionMissingError()\n      }\n\n      const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n      if (error) {\n        return { data: { user: null, session: null }, error: error }\n      }\n\n      if (!session) {\n        return { data: { user: null, session: null }, error: null }\n      }\n\n      return { data: { user: session.user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Gets the session data from a URL string\n   */\n  private async _getSessionFromUrl(isPKCEFlow: boolean): Promise<\n    | {\n        data: { session: Session; redirectType: string | null }\n        error: null\n      }\n    | { data: { session: null; redirectType: null }; error: AuthError }\n  > {\n    try {\n      if (!isBrowser()) throw new AuthImplicitGrantRedirectError('No browser detected.')\n      if (this.flowType === 'implicit' && !this._isImplicitGrantFlow()) {\n        throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.')\n      } else if (this.flowType == 'pkce' && !isPKCEFlow) {\n        throw new AuthPKCEGrantCodeExchangeError('Not a valid PKCE flow url.')\n      }\n      if (isPKCEFlow) {\n        const authCode = getParameterByName('code')\n        if (!authCode) throw new AuthPKCEGrantCodeExchangeError('No code detected.')\n        const { data, error } = await this.exchangeCodeForSession(authCode)\n        if (error) throw error\n        if (!data.session) throw new AuthPKCEGrantCodeExchangeError('No session detected.')\n        let url = new URL(window.location.href)\n        url.searchParams.delete('code')\n        window.history.replaceState(window.history.state, '', url.toString())\n        return { data: { session: data.session, redirectType: null }, error: null }\n      }\n\n      const error_description = getParameterByName('error_description')\n      if (error_description) {\n        const error_code = getParameterByName('error_code')\n        if (!error_code) throw new AuthImplicitGrantRedirectError('No error_code detected.')\n        const error = getParameterByName('error')\n        if (!error) throw new AuthImplicitGrantRedirectError('No error detected.')\n\n        throw new AuthImplicitGrantRedirectError(error_description, { error, code: error_code })\n      }\n\n      const provider_token = getParameterByName('provider_token')\n      const provider_refresh_token = getParameterByName('provider_refresh_token')\n      const access_token = getParameterByName('access_token')\n      if (!access_token) throw new AuthImplicitGrantRedirectError('No access_token detected.')\n      const expires_in = getParameterByName('expires_in')\n      if (!expires_in) throw new AuthImplicitGrantRedirectError('No expires_in detected.')\n      const refresh_token = getParameterByName('refresh_token')\n      if (!refresh_token) throw new AuthImplicitGrantRedirectError('No refresh_token detected.')\n      const token_type = getParameterByName('token_type')\n      if (!token_type) throw new AuthImplicitGrantRedirectError('No token_type detected.')\n\n      const timeNow = Math.round(Date.now() / 1000)\n      const expires_at = timeNow + parseInt(expires_in)\n\n      const { data, error } = await this.getUser(access_token)\n      if (error) throw error\n      const user: User = data.user\n      const session: Session = {\n        provider_token,\n        provider_refresh_token,\n        access_token,\n        expires_in: parseInt(expires_in),\n        expires_at,\n        refresh_token,\n        token_type,\n        user,\n      }\n      const redirectType = getParameterByName('type')\n\n      // Remove tokens from URL\n      window.location.hash = ''\n\n      return { data: { session, redirectType }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, redirectType: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n   */\n  private _isImplicitGrantFlow(): boolean {\n    return (\n      isBrowser() &&\n      (Boolean(getParameterByName('access_token')) ||\n        Boolean(getParameterByName('error_description')))\n    )\n  }\n  /**\n   * Checks if the current URL and backing storage contain parameters given by a PKCE flow\n   */\n  private async _isPKCEFlow(): Promise<boolean> {\n    const currentStorageContent = await getItemAsync(\n      this.storage,\n      `${this.storageKey}-code-verifier`\n    )\n    return Boolean(getParameterByName('code')) && Boolean(currentStorageContent)\n  }\n\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n   *\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n   */\n  async signOut(): Promise<{ error: AuthError | null }> {\n    const { data, error: sessionError } = await this.getSession()\n    if (sessionError) {\n      return { error: sessionError }\n    }\n    const accessToken = data.session?.access_token\n    if (accessToken) {\n      const { error } = await this.admin.signOut(accessToken)\n      if (error) {\n        // ignore 404s since user might not exist anymore\n        // ignore 401s since an invalid or expired JWT should sign out the current session\n        if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401))) {\n          return { error }\n        }\n      }\n    }\n    await this._removeSession()\n    await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`)\n    this._notifyAllSubscribers('SIGNED_OUT', null)\n    return { error: null }\n  }\n\n  /**\n   * Receive a notification every time an auth event happens.\n   * @param callback A callback function to be invoked when an auth event happens.\n   */\n  onAuthStateChange(callback: (event: AuthChangeEvent, session: Session | null) => void): {\n    data: { subscription: Subscription }\n  } {\n    const id: string = uuid()\n    const subscription: Subscription = {\n      id,\n      callback,\n      unsubscribe: () => {\n        this.stateChangeEmitters.delete(id)\n      },\n    }\n\n    this.stateChangeEmitters.set(id, subscription)\n\n    this.emitInitialSession(id)\n\n    return { data: { subscription } }\n  }\n\n  private async emitInitialSession(id: string): Promise<void> {\n    try {\n      const {\n        data: { session },\n        error,\n      } = await this.getSession()\n      if (error) throw error\n\n      this.stateChangeEmitters.get(id)?.callback('INITIAL_SESSION', session)\n    } catch (err) {\n      this.stateChangeEmitters.get(id)?.callback('INITIAL_SESSION', null)\n      console.error(err)\n    }\n  }\n\n  /**\n   * Sends a password reset request to an email address.\n   * This method supports the PKCE flow.\n   * @param email The email address of the user.\n   * @param options.redirectTo The URL to send the user to after they click the password reset link.\n   * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n   */\n  async resetPasswordForEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<\n    | {\n        data: {}\n        error: null\n      }\n    | { data: null; error: AuthError }\n  > {\n    let codeChallenge: string | null = null\n    let codeChallengeMethod: string | null = null\n    if (this.flowType === 'pkce') {\n      const codeVerifier = generatePKCEVerifier()\n      await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier)\n      codeChallenge = await generatePKCEChallenge(codeVerifier)\n      codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256'\n    }\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/recover`, {\n        body: {\n          email,\n          code_challenge: codeChallenge,\n          code_challenge_method: codeChallengeMethod,\n          gotrue_meta_security: { captcha_token: options.captchaToken },\n        },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n  private async _refreshAccessToken(refreshToken: string): Promise<AuthResponse> {\n    try {\n      const startedAt = Date.now()\n\n      // will attempt to refresh the token with exponential backoff\n      return await retryable(\n        async (attempt) => {\n          await sleep(attempt * 200) // 0, 200, 400, 800, ...\n\n          return await _request(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n            body: { refresh_token: refreshToken },\n            headers: this.headers,\n            xform: _sessionResponse,\n          })\n        },\n        (attempt, _, result) =>\n          result &&\n          result.error &&\n          result.error instanceof AuthRetryableFetchError &&\n          // retryable only if the request can be sent before the backoff overflows the tick duration\n          Date.now() + (attempt + 1) * 200 - startedAt < AUTO_REFRESH_TICK_DURATION\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n      throw error\n    }\n  }\n\n  private _isValidSession(maybeSession: unknown): maybeSession is Session {\n    const isValidSession =\n      typeof maybeSession === 'object' &&\n      maybeSession !== null &&\n      'access_token' in maybeSession &&\n      'refresh_token' in maybeSession &&\n      'expires_at' in maybeSession\n\n    return isValidSession\n  }\n\n  private async _handleProviderSignIn(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n      skipBrowserRedirect?: boolean\n    }\n  ) {\n    const url: string = await this._getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n      queryParams: options.queryParams,\n    })\n    // try to open on the browser\n    if (isBrowser() && !options.skipBrowserRedirect) {\n      window.location.assign(url)\n    }\n\n    return { data: { provider, url }, error: null }\n  }\n\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n  private async _recoverAndRefresh() {\n    try {\n      const currentSession = await getItemAsync(this.storage, this.storageKey)\n      if (!this._isValidSession(currentSession)) {\n        if (currentSession !== null) {\n          await this._removeSession()\n        }\n\n        return\n      }\n\n      const timeNow = Math.round(Date.now() / 1000)\n\n      if ((currentSession.expires_at ?? Infinity) < timeNow + EXPIRY_MARGIN) {\n        if (this.autoRefreshToken && currentSession.refresh_token) {\n          const { error } = await this._callRefreshToken(currentSession.refresh_token)\n\n          if (error) {\n            console.log(error.message)\n            await this._removeSession()\n          }\n        }\n      } else {\n        if (this.persistSession) {\n          await this._saveSession(currentSession)\n        }\n        this._notifyAllSubscribers('SIGNED_IN', currentSession)\n      }\n    } catch (err) {\n      console.error(err)\n      return\n    }\n  }\n\n  private async _callRefreshToken(refreshToken: string): Promise<CallRefreshTokenResult> {\n    // refreshing is already in progress\n    if (this.refreshingDeferred) {\n      return this.refreshingDeferred.promise\n    }\n\n    try {\n      this.refreshingDeferred = new Deferred<CallRefreshTokenResult>()\n\n      if (!refreshToken) {\n        throw new AuthSessionMissingError()\n      }\n      const { data, error } = await this._refreshAccessToken(refreshToken)\n      if (error) throw error\n      if (!data.session) throw new AuthSessionMissingError()\n\n      await this._saveSession(data.session)\n      this._notifyAllSubscribers('TOKEN_REFRESHED', data.session)\n\n      const result = { session: data.session, error: null }\n\n      this.refreshingDeferred.resolve(result)\n\n      return result\n    } catch (error) {\n      if (isAuthError(error)) {\n        const result = { session: null, error }\n\n        this.refreshingDeferred?.resolve(result)\n\n        return result\n      }\n\n      this.refreshingDeferred?.reject(error)\n      throw error\n    } finally {\n      this.refreshingDeferred = null\n    }\n  }\n\n  private _notifyAllSubscribers(event: AuthChangeEvent, session: Session | null, broadcast = true) {\n    if (this.broadcastChannel && broadcast) {\n      this.broadcastChannel.postMessage({ event, session })\n    }\n\n    this.stateChangeEmitters.forEach((x) => x.callback(event, session))\n  }\n\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n  private async _saveSession(session: Session) {\n    if (!this.persistSession) {\n      this.inMemorySession = session\n    }\n\n    if (this.persistSession && session.expires_at) {\n      await this._persistSession(session)\n    }\n  }\n\n  private _persistSession(currentSession: Session) {\n    return setItemAsync(this.storage, this.storageKey, currentSession)\n  }\n\n  private async _removeSession() {\n    if (this.persistSession) {\n      await removeItemAsync(this.storage, this.storageKey)\n    } else {\n      this.inMemorySession = null\n    }\n  }\n\n  /**\n   * Removes any registered visibilitychange callback.\n   *\n   * {@see #startAutoRefresh}\n   * {@see #stopAutoRefresh}\n   */\n  private _removeVisibilityChangedCallback() {\n    const callback = this.visibilityChangedCallback\n    this.visibilityChangedCallback = null\n\n    try {\n      if (callback && isBrowser() && window?.removeEventListener) {\n        window.removeEventListener('visibilitychange', callback)\n      }\n    } catch (e) {\n      console.error('removing visibilitychange callback failed', e)\n    }\n  }\n\n  /**\n   * This is the private implementation of {@link #startAutoRefresh}. Use this\n   * within the library.\n   */\n  private async _startAutoRefresh() {\n    await this._stopAutoRefresh()\n\n    const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION)\n    this.autoRefreshTicker = ticker\n\n    if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\n      // ticker is a NodeJS Timeout object that has an `unref` method\n      // https://nodejs.org/api/timers.html#timeoutunref\n      // When auto refresh is used in NodeJS (like for testing) the\n      // `setInterval` is preventing the process from being marked as\n      // finished and tests run endlessly. This can be prevented by calling\n      // `unref()` on the returned object.\n      ticker.unref()\n      // @ts-ignore\n    } else if (typeof Deno !== 'undefined' && typeof Deno.unrefTimer === 'function') {\n      // similar like for NodeJS, but with the Deno API\n      // https://deno.land/api@latest?unstable&s=Deno.unrefTimer\n      // @ts-ignore\n      Deno.unrefTimer(ticker)\n    }\n\n    // run the tick immediately\n    await this._autoRefreshTokenTick()\n  }\n\n  /**\n   * This is the private implementation of {@link #stopAutoRefresh}. Use this\n   * within the library.\n   */\n  private async _stopAutoRefresh() {\n    const ticker = this.autoRefreshTicker\n    this.autoRefreshTicker = null\n\n    if (ticker) {\n      clearInterval(ticker)\n    }\n  }\n\n  /**\n   * Starts an auto-refresh process in the background. The session is checked\n   * every few seconds. Close to the time of expiration a process is started to\n   * refresh the session. If refreshing fails it will be retried for as long as\n   * necessary.\n   *\n   * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\n   * to call this function, it will be called for you.\n   *\n   * On browsers the refresh process works only when the tab/window is in the\n   * foreground to conserve resources as well as prevent race conditions and\n   * flooding auth with requests. If you call this method any managed\n   * visibility change callback will be removed and you must manage visibility\n   * changes on your own.\n   *\n   * On non-browser platforms the refresh process works *continuously* in the\n   * background, which may not be desirable. You should hook into your\n   * platform's foreground indication mechanism and call these methods\n   * appropriately to conserve resources.\n   *\n   * {@see #stopAutoRefresh}\n   */\n  async startAutoRefresh() {\n    this._removeVisibilityChangedCallback()\n    await this._startAutoRefresh()\n  }\n\n  /**\n   * Stops an active auto refresh process running in the background (if any).\n   *\n   * If you call this method any managed visibility change callback will be\n   * removed and you must manage visibility changes on your own.\n   *\n   * See {@link #startAutoRefresh} for more details.\n   */\n  async stopAutoRefresh() {\n    this._removeVisibilityChangedCallback()\n    await this._stopAutoRefresh()\n  }\n\n  /**\n   * Runs the auto refresh token tick.\n   */\n  private async _autoRefreshTokenTick() {\n    const now = Date.now()\n\n    try {\n      const {\n        data: { session },\n      } = await this.getSession()\n\n      if (!session || !session.refresh_token || !session.expires_at) {\n        return\n      }\n\n      // session will expire in this many ticks (or has already expired if <= 0)\n      const expiresInTicks = Math.floor(\n        (session.expires_at * 1000 - now) / AUTO_REFRESH_TICK_DURATION\n      )\n\n      if (expiresInTicks < AUTO_REFRESH_TICK_THRESHOLD) {\n        await this._callRefreshToken(session.refresh_token)\n      }\n    } catch (e: any) {\n      console.error('Auto refresh tick failed with error. This is likely a transient error.', e)\n    }\n  }\n\n  /**\n   * Registers callbacks on the browser / platform, which in-turn run\n   * algorithms when the browser window/tab are in foreground. On non-browser\n   * platforms it assumes always foreground.\n   */\n  private async _handleVisibilityChange() {\n    if (!isBrowser() || !window?.addEventListener) {\n      if (this.autoRefreshToken) {\n        // in non-browser environments the refresh token ticker runs always\n        this.startAutoRefresh()\n      }\n\n      return false\n    }\n\n    try {\n      this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false)\n\n      window?.addEventListener('visibilitychange', this.visibilityChangedCallback)\n\n      // now immediately call the visbility changed callback to setup with the\n      // current visbility state\n      await this._onVisibilityChanged(true) // initial call\n    } catch (error) {\n      console.error('_handleVisibilityChange', error)\n    }\n  }\n\n  /**\n   * Callback registered with `window.addEventListener('visibilitychange')`.\n   */\n  private async _onVisibilityChanged(isInitial: boolean) {\n    if (document.visibilityState === 'visible') {\n      if (!isInitial) {\n        // initial visibility change setup is handled in another flow under #initialize()\n        await this.initializePromise\n        await this._recoverAndRefresh()\n      }\n\n      if (this.autoRefreshToken) {\n        // in browser environments the refresh token ticker runs only on focused tabs\n        // which prevents race conditions\n        this._startAutoRefresh()\n      }\n    } else if (document.visibilityState === 'hidden') {\n      if (this.autoRefreshToken) {\n        this._stopAutoRefresh()\n      }\n    }\n  }\n\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n   */\n  private async _getUrlForProvider(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n    }\n  ) {\n    const urlParams: string[] = [`provider=${encodeURIComponent(provider)}`]\n    if (options?.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`)\n    }\n    if (options?.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`)\n    }\n    if (this.flowType === 'pkce') {\n      const codeVerifier = generatePKCEVerifier()\n      await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier)\n      const codeChallenge = await generatePKCEChallenge(codeVerifier)\n      const codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256'\n      const flowParams = new URLSearchParams({\n        code_challenge: `${encodeURIComponent(codeChallenge)}`,\n        code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`,\n      })\n      urlParams.push(flowParams.toString())\n    }\n    if (options?.queryParams) {\n      const query = new URLSearchParams(options.queryParams)\n      urlParams.push(query.toString())\n    }\n\n    return `${this.url}/authorize?${urlParams.join('&')}`\n  }\n\n  private async _unenroll(params: MFAUnenrollParams): Promise<AuthMFAUnenrollResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      return await _request(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n        headers: this.headers,\n        jwt: sessionData?.session?.access_token,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#enroll}\n   */\n  private async _enroll(params: MFAEnrollParams): Promise<AuthMFAEnrollResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/factors`, {\n        body: {\n          friendly_name: params.friendlyName,\n          factor_type: params.factorType,\n          issuer: params.issuer,\n        },\n        headers: this.headers,\n        jwt: sessionData?.session?.access_token,\n      })\n\n      if (error) {\n        return { data: null, error }\n      }\n\n      if (data?.totp?.qr_code) {\n        data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#verify}\n   */\n  private async _verify(params: MFAVerifyParams): Promise<AuthMFAVerifyResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      const { data, error } = await _request(\n        this.fetch,\n        'POST',\n        `${this.url}/factors/${params.factorId}/verify`,\n        {\n          body: { code: params.code, challenge_id: params.challengeId },\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        }\n      )\n      if (error) {\n        return { data: null, error }\n      }\n\n      await this._saveSession({\n        expires_at: Math.round(Date.now() / 1000) + data.expires_in,\n        ...data,\n      })\n      this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data)\n\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#challenge}\n   */\n  private async _challenge(params: MFAChallengeParams): Promise<AuthMFAChallengeResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      return await _request(\n        this.fetch,\n        'POST',\n        `${this.url}/factors/${params.factorId}/challenge`,\n        {\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        }\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#challengeAndVerify}\n   */\n  private async _challengeAndVerify(\n    params: MFAChallengeAndVerifyParams\n  ): Promise<AuthMFAVerifyResponse> {\n    const { data: challengeData, error: challengeError } = await this._challenge({\n      factorId: params.factorId,\n    })\n    if (challengeError) {\n      return { data: null, error: challengeError }\n    }\n    return await this._verify({\n      factorId: params.factorId,\n      challengeId: challengeData.id,\n      code: params.code,\n    })\n  }\n\n  /**\n   * {@see GoTrueMFAApi#listFactors}\n   */\n  private async _listFactors(): Promise<AuthMFAListFactorsResponse> {\n    const {\n      data: { user },\n      error: userError,\n    } = await this.getUser()\n    if (userError) {\n      return { data: null, error: userError }\n    }\n\n    const factors = user?.factors || []\n    const totp = factors.filter(\n      (factor) => factor.factor_type === 'totp' && factor.status === 'verified'\n    )\n\n    return {\n      data: {\n        all: factors,\n        totp,\n      },\n      error: null,\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\n   */\n  private async _getAuthenticatorAssuranceLevel(): Promise<AuthMFAGetAuthenticatorAssuranceLevelResponse> {\n    const {\n      data: { session },\n      error: sessionError,\n    } = await this.getSession()\n    if (sessionError) {\n      return { data: null, error: sessionError }\n    }\n    if (!session) {\n      return {\n        data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },\n        error: null,\n      }\n    }\n\n    const payload = this._decodeJWT(session.access_token)\n\n    let currentLevel: AuthenticatorAssuranceLevels | null = null\n\n    if (payload.aal) {\n      currentLevel = payload.aal\n    }\n\n    let nextLevel: AuthenticatorAssuranceLevels | null = currentLevel\n\n    const verifiedFactors =\n      session.user.factors?.filter((factor: Factor) => factor.status === 'verified') ?? []\n\n    if (verifiedFactors.length > 0) {\n      nextLevel = 'aal2'\n    }\n\n    const currentAuthenticationMethods = payload.amr || []\n\n    return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null }\n  }\n}\n","import { GoTrueClient } from '@supabase/gotrue-js'\nimport { SupabaseAuthClientOptions } from './types'\n\nexport class SupabaseAuthClient extends GoTrueClient {\n  constructor(options: SupabaseAuthClientOptions) {\n    super(options)\n  }\n}\n","import { FunctionsClient } from '@supabase/functions-js'\nimport { AuthChangeEvent } from '@supabase/gotrue-js'\nimport {\n  PostgrestClient,\n  PostgrestFilterBuilder,\n  PostgrestQueryBuilder,\n} from '@supabase/postgrest-js'\nimport {\n  RealtimeChannel,\n  RealtimeChannelOptions,\n  RealtimeClient,\n  RealtimeClientOptions,\n} from '@supabase/realtime-js'\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'\nimport { DEFAULT_HEADERS } from './lib/constants'\nimport { fetchWithAuth } from './lib/fetch'\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'\n\nconst DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS,\n}\n\nconst DEFAULT_DB_OPTIONS = {\n  schema: 'public',\n}\n\nconst DEFAULT_AUTH_OPTIONS: SupabaseAuthClientOptions = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  flowType: 'implicit',\n}\n\nconst DEFAULT_REALTIME_OPTIONS: RealtimeClientOptions = {}\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n> {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n  realtime: RealtimeClient\n\n  protected realtimeUrl: string\n  protected authUrl: string\n  protected storageUrl: string\n  protected functionsUrl: string\n  protected rest: PostgrestClient<Database, SchemaName>\n  protected storageKey: string\n  protected fetch?: Fetch\n  protected changedAccessToken: string | undefined\n\n  protected headers: {\n    [key: string]: string\n  }\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions<SchemaName>\n  ) {\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\n\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws')\n    this.authUrl = `${_supabaseUrl}/auth/v1`\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\n    this.functionsUrl = `${_supabaseUrl}/functions/v1`\n\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: { ...DEFAULT_AUTH_OPTIONS, storageKey: defaultStorageKey },\n      global: DEFAULT_GLOBAL_OPTIONS,\n    }\n\n    const settings = applySettingDefaults(options ?? {}, DEFAULTS)\n\n    this.storageKey = settings.auth?.storageKey ?? ''\n    this.headers = settings.global?.headers ?? {}\n\n    this.auth = this._initSupabaseAuthClient(\n      settings.auth ?? {},\n      this.headers,\n      settings.global?.fetch\n    )\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global?.fetch)\n\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n      headers: this.headers,\n      schema: settings.db?.schema,\n      fetch: this.fetch,\n    })\n\n    this._listenForAuthEvents()\n  }\n\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch,\n    })\n  }\n\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch)\n  }\n\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName]\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<Schema, View>\n  from(relation: string): PostgrestQueryBuilder<Schema, any>\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation: string): PostgrestQueryBuilder<Schema, any> {\n    return this.rest.from(relation)\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc<\n    FunctionName extends string & keyof Schema['Functions'],\n    Function_ extends Schema['Functions'][FunctionName]\n  >(\n    fn: FunctionName,\n    args: Function_['Args'] = {},\n    options?: {\n      head?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<\n    Schema,\n    Function_['Returns'] extends any[]\n      ? Function_['Returns'][number] extends Record<string, unknown>\n        ? Function_['Returns'][number]\n        : never\n      : never,\n    Function_['Returns']\n  > {\n    return this.rest.rpc(fn, args, options)\n  }\n\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n  channel(name: string, opts: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\n    return this.realtime.channel(name, opts)\n  }\n\n  /**\n   * Returns all Realtime channels.\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.realtime.getChannels()\n  }\n\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n  removeChannel(channel: RealtimeChannel): Promise<'ok' | 'timed out' | 'error'> {\n    return this.realtime.removeChannel(channel)\n  }\n\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n  removeAllChannels(): Promise<('ok' | 'timed out' | 'error')[]> {\n    return this.realtime.removeAllChannels()\n  }\n\n  private async _getAccessToken() {\n    const { data } = await this.auth.getSession()\n\n    return data.session?.access_token ?? null\n  }\n\n  private _initSupabaseAuthClient(\n    {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      storageKey,\n      flowType,\n    }: SupabaseAuthClientOptions,\n    headers?: Record<string, string>,\n    fetch?: Fetch\n  ) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: { ...authHeaders, ...headers },\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      flowType,\n      fetch,\n    })\n  }\n\n  private _initRealtimeClient(options: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl, {\n      ...options,\n      params: { ...{ apikey: this.supabaseKey }, ...options?.params },\n    })\n  }\n\n  private _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, session?.access_token, 'CLIENT')\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    token: string | undefined,\n    source: 'CLIENT' | 'STORAGE'\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      // Token has changed\n      this.realtime.setAuth(token ?? null)\n\n      this.changedAccessToken = token\n    } else if (event === 'SIGNED_OUT') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey)\n      if (source == 'STORAGE') this.auth.signOut()\n      this.changedAccessToken = undefined\n    }\n  }\n}\n","// helpers.ts\nimport { SupabaseClientOptions } from './types'\n\nexport function uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n\nexport function stripTrailingSlash(url: string): string {\n  return url.replace(/\\/$/, '')\n}\n\nexport const isBrowser = () => typeof window !== 'undefined'\n\nexport function applySettingDefaults<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>(\n  options: SupabaseClientOptions<SchemaName>,\n  defaults: SupabaseClientOptions<any>\n): SupabaseClientOptions<SchemaName> {\n  const {\n    db: dbOptions,\n    auth: authOptions,\n    realtime: realtimeOptions,\n    global: globalOptions,\n  } = options\n  const {\n    db: DEFAULT_DB_OPTIONS,\n    auth: DEFAULT_AUTH_OPTIONS,\n    realtime: DEFAULT_REALTIME_OPTIONS,\n    global: DEFAULT_GLOBAL_OPTIONS,\n  } = defaults\n\n  return {\n    db: {\n      ...DEFAULT_DB_OPTIONS,\n      ...dbOptions,\n    },\n    auth: {\n      ...DEFAULT_AUTH_OPTIONS,\n      ...authOptions,\n    },\n    realtime: {\n      ...DEFAULT_REALTIME_OPTIONS,\n      ...realtimeOptions,\n    },\n    global: {\n      ...DEFAULT_GLOBAL_OPTIONS,\n      ...globalOptions,\n    },\n  }\n}\n","import SupabaseClient from './SupabaseClient'\nimport type { GenericSchema, SupabaseClientOptions } from './lib/types'\n\nexport * from '@supabase/gotrue-js'\nexport type { User as AuthUser, Session as AuthSession } from '@supabase/gotrue-js'\nexport type {\n  PostgrestResponse,\n  PostgrestSingleResponse,\n  PostgrestMaybeSingleResponse,\n  PostgrestError,\n} from '@supabase/postgrest-js'\nexport {\n  FunctionsHttpError,\n  FunctionsFetchError,\n  FunctionsRelayError,\n  FunctionsError,\n} from '@supabase/functions-js'\nexport * from '@supabase/realtime-js'\nexport { default as SupabaseClient } from './SupabaseClient'\nexport type { SupabaseClientOptions } from './lib/types'\n\n/**\n * Creates a new Supabase Client.\n */\nexport const createClient = <\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n>(\n  supabaseUrl: string,\n  supabaseKey: string,\n  options?: SupabaseClientOptions<SchemaName>\n): SupabaseClient<Database, SchemaName, Schema> => {\n  return new SupabaseClient(supabaseUrl, supabaseKey, options)\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","var naiveFallback = function () {\n\tif (typeof self === \"object\" && self) return self;\n\tif (typeof window === \"object\" && window) return window;\n\tthrow new Error(\"Unable to resolve global `this`\");\n};\n\nmodule.exports = (function () {\n\tif (this) return this;\n\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\n\n\t// Fallback to standard globalThis if available\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\n\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\n\t// In all ES5+ engines global object inherits from Object.prototype\n\t// (if you approached one that doesn't please report)\n\ttry {\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\n\t\t\tget: function () { return this; },\n\t\t\tconfigurable: true\n\t\t});\n\t} catch (error) {\n\t\t// Unfortunate case of updates to Object.prototype being restricted\n\t\t// via preventExtensions, seal or freeze\n\t\treturn naiveFallback();\n\t}\n\ttry {\n\t\t// Safari case (window.__global__ works, but __global__ does not)\n\t\tif (!__global__) return naiveFallback();\n\t\treturn __global__;\n\t} finally {\n\t\tdelete Object.prototype.__global__;\n\t}\n})();\n","var _globalThis;\nif (typeof globalThis === 'object') {\n\t_globalThis = globalThis;\n} else {\n\ttry {\n\t\t_globalThis = require('es5-ext/global');\n\t} catch (error) {\n\t} finally {\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\n\t}\n}\n\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\nvar websocket_version = require('./version');\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\nif (NativeWebSocket) {\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\n\t\tObject.defineProperty(W3CWebSocket, prop, {\n\t\t\tget: function() { return NativeWebSocket[prop]; }\n\t\t});\n\t});\n}\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n","module.exports = require('../package.json').version;\n"],"names":["set","target","property","value","receiver","Reflect","desc","base","object","Object","prototype","hasOwnProperty","call","getPrototypeOf","getOwnPropertyDescriptor","writable","defineProperty","SOCKET_STATES","CHANNEL_STATES","CHANNEL_EVENTS","TRANSPORTS","CONNECTION_STATE","FunctionsError","_Error","_inherits","_super","_createSuper","message","_thisSuper","_this","name","arguments","length","undefined","context","_classCallCheck","isStrict","TypeError","_set","_assertThisInitialized","_getPrototypeOf","_createClass","_wrapNativeSuper","Error","FunctionsFetchError","_FunctionsError","_super2","FunctionsRelayError","_FunctionsError2","_super3","FunctionsHttpError","_FunctionsError3","_super4","FunctionsClient","url","_ref","_ref$headers","headers","customFetch","this","fetch","_fetch","_len","args","Array","_key","__awaiter","_regeneratorRuntime","mark","_callee","_yield$import","wrap","_context","prev","next","sent","apply","abrupt","stop","resolveFetch","key","token","Authorization","concat","functionName","options","method","functionArgs","body","_headers","Blob","ArrayBuffer","FormData","JSON","stringify","assign","catch","fetchError","response","isRelayError","get","ok","responseType","_a","split","trim","json","data","blob","formData","text","error","t0","PostgrestBuilder","builder","shouldThrowOnError","schema","signal","isMaybeSingle","crossFetch","onfulfilled","onrejected","includes","res","toString","then","_asyncToGenerator","_b","_c","count","status","statusText","countHeader","contentRange","_body","postgrestResponse","parse","match","parseInt","isArray","code","details","hint","_d","_x","stack","PostgrestTransformBuilder","_PostgrestBuilder","columns","quoted","cleanedColumns","map","c","test","join","searchParams","column","_ref$ascending","ascending","nullsFirst","foreignTable","existingOrder","from","to","keyOffset","keyLimit","_ref4","_ref4$analyze","analyze","_ref4$verbose","verbose","_ref4$settings","settings","_ref4$buffers","buffers","_ref4$wal","wal","_ref4$format","format","filter","Boolean","forMediatype","PostgrestFilterBuilder","_PostgrestTransformBu","append","pattern","patterns","values","cleanedValues","s","RegExp","range","query","config","type","typePart","configPart","entries","forEach","_ref2","_ref3","_slicedToArray","operator","filters","PostgrestQueryBuilder","_ref2$head","head","allowEmpty","_ref3$defaultToNull","defaultToNull","prefersHeaders","push","reduce","acc","x","keys","uniqueColumns","_toConsumableArray","Set","onConflict","_ref4$ignoreDuplicate","ignoreDuplicates","_ref4$defaultToNull","unshift","DEFAULT_HEADERS","PostgrestClient","relation","URL","fn","REALTIME_PRESENCE_LISTEN_EVENTS","Timer","callback","timerCalc","timer","tries","clearTimeout","setTimeout","Serializer","HEADER_LENGTH","rawPayload","constructor","_binaryDecode","buffer","view","DataView","decoder","TextDecoder","_decodeBroadcast","topicSize","getUint8","eventSize","offset","topic","decode","slice","event","ref","payload","byteLength","Push","channel","timeout","timeoutTimer","receivedResp","recHooks","refEvent","rateLimited","_cancelRefEvent","send","_hasReceived","startTimeout","socket","join_ref","_joinRef","_makeRef","_replyEventName","_on","_cancelTimeout","_matchReceive","trigger","_trigger","_off","h","PostgresTypes","RealtimePresence","opts","state","pendingDiffs","joinRef","caller","onJoin","onLeave","onSync","events","diff","newState","_this$caller","syncState","syncDiff","_this$caller2","inPendingSyncState","currentPresences","newPresences","leftPresences","currentState","cloneDeep","transformedState","transformState","joins","leaves","presences","newPresenceRefs","m","presence_ref","curPresenceRefs","joinedPresences","indexOf","_this2","_joins$leaves","_state$key","joinedPresenceRefs","curPresences","presenceRefsToRemove","obj","func","getOwnPropertyNames","metas","presence","REALTIME_POSTGRES_CHANGES_LISTEN_EVENT","REALTIME_LISTEN_TYPES","REALTIME_SUBSCRIBE_STATES","convertChangeData","record","skipTypes","rec_key","convertColumn","columnName","find","colType","convertCell","noop","charAt","dataType","toArray","bool","toBoolean","float4","float8","int2","int4","int8","numeric","oid","toNumber","jsonb","toJson","timestamp","toTimestampString","abstime","date","daterange","int4range","int8range","money","reltime","time","timestamptz","timetz","tsrange","tstzrange","parsedValue","parseFloat","Number","isNaN","console","log","lastIdx","closeBrace","arr","valTrim","_","val","replace","RealtimeChannel","params","bindings","closed","joinedOnce","pushBuffer","broadcast","ack","self","joinPush","rejoinTimer","_rejoinUntilConnected","reconnectAfterMs","receive","joined","reset","pushEvent","_onClose","_remove","_onError","reason","_isLeaving","_isClosed","errored","scheduleTimeout","_isJoining","reply","_this$params$config","e","accessTokenPayload","postgres_changes","r","accessToken","access_token","updateJoinPayload","_rejoin","serverPostgresFilters","setAuth","clientPostgresBindings","bindingsLen","newPostgresBindings","i","clientPostgresBinding","_clientPostgresBindin","table","serverPostgresFilter","unsubscribe","id","_context2","_callee2","_this3","Promise","resolve","_push","updatePayload","_this4","leaving","onClose","close","destroy","leavePush","leave","_canPush","_event","_this5","typeLower","toLocaleLowerCase","handledPayload","_onMessage","bind","bindId","bindEvent","ids","_e","_f","postgresChanges","enrichedPayload","commit_timestamp","eventType","new","old","errors","_getPayloadRecords","joining","binding","isEqual","isConnected","_isJoined","_leaveOpenTopic","resend","records","Transformers","old_record","obj1","obj2","k","RealtimeClient","endPoint","channels","transport","w3cwebsocket","heartbeatIntervalMs","heartbeatTimer","pendingHeartbeatRef","logger","conn","sendBuffer","serializer","stateChangeCallbacks","open","eventsPerSecondLimitMs","inThrottle","websocket","eventsPerSecond","Math","floor","encode","reconnectTimer","disconnect","connect","_endPointURL","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","_onConnMessage","onclose","_onConnClose","clearInterval","all","values_1","_context3","_callee3","kind","msg","readyState","connecting","Connecting","Open","closing","Closing","Closed","connectionState","chan","result","_throttle","newRef","dupChannel","_appendParams","vsn","rawMessage","_isMember","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","prefix","URLSearchParams","_this6","StorageError","__isStorageError","isStorageError","StorageApiError","_StorageError","StorageUnknownError","_StorageError2","originalError","_getErrorMessage","err","error_description","handleError","reject","Res","Response","_getRequestParams","parameters","_handleRequest","fetcher","noResolveJson","post","_context4","_callee4","put","_context5","_callee5","remove","_context6","_callee6","DEFAULT_SEARCH_OPTIONS","limit","sortBy","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","bucketId","path","fileBody","fileOptions","String","cleanPath","_removeEmptyFolders","_path","_getFinalPath","duplex","uploadOrUpdate","signedUrl","fromPath","toPath","sourceKey","destinationKey","_context7","Key","_callee7","expiresIn","_context8","transform","downloadQueryParam","download","encodeURI","signedURL","_callee8","paths","_context9","datum","_callee9","wantsTransformation","renderPath","transformationQuery","transformOptsToQueryString","queryString","_context10","_callee10","_queryString","publicUrl","prefixes","_context11","_callee11","_context12","_callee12","width","height","resize","quality","StorageBucketApi","public","file_size_limit","fileSizeLimit","allowed_mime_types","allowedMimeTypes","StorageClient","_StorageBucketApi","fetchWithAuth","supabaseKey","getAccessToken","HeadersConstructor","Headers","CrossFetchHeaders","input","init","t1","t2","has","isBrowser","document","localStorageWriteTests","tested","supportsLocalStorage","globalThis","localStorage","randomKey","random","setItem","removeItem","getParameterByName","window","location","href","results","exec","decodeURIComponent","setItemAsync","storage","getItemAsync","getItem","removeItemAsync","Deferred","promise","promiseConstructor","rej","decodeJWTPayload","parts","base64Url","chr1","chr2","chr3","enc2","enc3","enc4","base64","fromCharCode","decodeBase64URL","sleep","accept","retryable","isRetryable","attempt","Infinity","dec2hex","dec","substr","generatePKCEVerifier","array","Uint32Array","crypto","charSet","verifier","getRandomValues","sha256","randomString","encoder","TextEncoder","encodedData","subtle","digest","hash","bytes","Uint8Array","generatePKCEChallenge","warn","hashed","btoa","AuthError","__isAuthError","isAuthError","AuthApiError","_AuthError","isAuthApiError","AuthUnknownError","_AuthError2","CustomAuthError","_AuthError3","AuthSessionMissingError","_CustomAuthError","_super5","AuthInvalidTokenResponseError","_CustomAuthError2","_super6","AuthInvalidCredentialsError","_CustomAuthError3","_super7","AuthImplicitGrantRedirectError","_CustomAuthError4","_super8","AuthPKCEGrantCodeExchangeError","_CustomAuthError5","_super9","AuthRetryableFetchError","_CustomAuthError6","_super10","NETWORK_ERROR_CODES","maybeResponse","_request","jwt","qs","redirectTo","xform","_sessionResponse","session","refresh_token","expires_in","hasSession","expires_at","round","Date","now","user","_userResponse","_ssoResponse","_generateLinkResponse","action_link","email_otp","hashed_token","redirect_to","verification_type","rest","__rest","properties","_noResolveJsonResponse","GoTrueAdminApi","_ref$url","mfa","listFactors","_listFactors","deleteFactor","_deleteFactor","email","new_email","newEmail","attributes","pagination","nextPage","lastPage","total","page","per_page","perPage","users","links","_g","link","substring","rel","uid","shouldSoftDelete","should_soft_delete","userId","factors","_yield$_request","configurable","__magic__","polyfillGlobalThis","DEFAULT_OPTIONS","storageKey","autoRefreshToken","persistSession","detectSessionInUrl","flowType","AUTO_REFRESH_TICK_DURATION","GoTrueClient","stateChangeEmitters","Map","autoRefreshTicker","visibilityChangedCallback","refreshingDeferred","initializePromise","broadcastChannel","inMemorySession","localStorageAdapter","admin","verify","_verify","enroll","_enroll","unenroll","_unenroll","challenge","_challenge","challengeAndVerify","_challengeAndVerify","getAuthenticatorAssuranceLevel","_getAuthenticatorAssuranceLevel","BroadcastChannel","addEventListener","_notifyAllSubscribers","initialize","_initialize","_isPKCEFlow","isPKCEFlow","_isImplicitGrantFlow","_getSessionFromUrl","_yield$this$_getSessi","_removeSession","redirectType","_saveSession","_recoverAndRefresh","_handleVisibilityChange","finish","credentials","password","codeChallenge","codeChallengeMethod","codeVerifier","emailRedirectTo","gotrue_meta_security","captcha_token","captchaToken","code_challenge","code_challenge_method","phone","_res","_res2","_handleProviderSignIn","provider","scopes","queryParams","skipBrowserRedirect","authCode","auth_code","code_verifier","nonce","id_token","create_user","shouldCreateUser","_yield$_request2","_yield$_request3","_yield$_request4","provider_id","providerId","domain","skip_http_redirect","getSession","_yield$this$getSessio","sessionError","_yield$_request5","endpoint","_yield$_request6","_yield$_request7","currentSession","maybeSession","_isValidSession","_callRefreshToken","_yield$this$_callRefr","_context13","_yield$this$getSessio2","_callee13","_yield$this$getSessio3","_context14","sessionData","_yield$_request8","userError","_callee14","_context15","timeNow","expiresAt","hasExpired","exp","_yield$this$_callRefr2","refreshedSession","getUser","_yield$this$getUser","token_type","_callee15","_context16","_yield$this$getSessio4","_yield$this$_callRefr3","_callee16","_context17","exchangeCodeForSession","_yield$this$exchangeC","delete","history","replaceState","error_code","provider_token","provider_refresh_token","_yield$this$getUser2","_callee17","currentStorageContent","_context18","_callee18","_yield$this$getSessio5","_context19","signOut","_yield$this$admin$sig","_callee19","subscription","emitInitialSession","_yield$this$getSessio6","_context20","_callee20","_context21","_callee21","refreshToken","startedAt","_context23","_callee22","_context22","_callee23","_getUrlForProvider","_context24","_callee24","_context25","_yield$this$_callRefr4","_callee25","_context26","_refreshAccessToken","_yield$this$_refreshA","_callee26","postMessage","_context27","_persistSession","_callee27","_context28","_callee28","removeEventListener","_stopAutoRefresh","ticker","_autoRefreshTokenTick","unref","Deno","unrefTimer","_context29","_callee29","_context30","_callee30","_removeVisibilityChangedCallback","_context31","_startAutoRefresh","_callee31","_context32","_callee32","_context33","_yield$this$getSessio7","_callee33","_context35","startAutoRefresh","_callee34","_context34","_onVisibilityChanged","_callee35","isInitial","visibilityState","_context36","_callee36","urlParams","encodeURIComponent","_context37","flowParams","_callee37","_yield$this$getSessio8","_context38","factorId","_callee38","_yield$this$getSessio9","_context39","friendly_name","friendlyName","factor_type","factorType","issuer","_yield$_request9","totp","qr_code","_callee39","_yield$this$getSessio10","_context40","challenge_id","challengeId","_yield$_request10","_callee40","_yield$this$getSessio11","_context41","_callee41","_yield$this$_challeng","_context42","challengeData","challengeError","_callee42","_yield$this$getUser3","_context43","factor","_callee43","_yield$this$getSessio12","_context44","currentLevel","nextLevel","currentAuthenticationMethods","_decodeJWT","aal","amr","_callee44","SupabaseAuthClient","_GoTrueClient","DEFAULT_GLOBAL_OPTIONS","DEFAULT_DB_OPTIONS","DEFAULT_AUTH_OPTIONS","DEFAULT_REALTIME_OPTIONS","SupabaseClient","supabaseUrl","_supabaseUrl","realtimeUrl","authUrl","storageUrl","functionsUrl","defaultStorageKey","hostname","defaults","dbOptions","db","authOptions","auth","realtimeOptions","realtime","globalOptions","global","applySettingDefaults","_initSupabaseAuthClient","_getAccessToken","_initRealtimeClient","_h","_listenForAuthEvents","SupabaseStorageClient","rpc","getChannels","removeChannel","removeAllChannels","_yield$this$auth$getS","authHeaders","apikey","onAuthStateChange","_handleTokenChanged","source","changedAccessToken","createClient","__self__","F","DOMException","exports","support","Symbol","viewClasses","isArrayBufferView","isView","normalizeName","toLowerCase","normalizeValue","iteratorFor","items","iterator","shift","done","header","consumed","bodyUsed","fileReaderReady","reader","onload","readBlobAsArrayBuffer","FileReader","readAsArrayBuffer","bufferClone","buf","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","_bodyFormData","_bodyArrayBuffer","rejected","arrayBuffer","readAsText","readBlobAsText","chars","readArrayBufferAsText","oldValue","thisArg","methods","Request","mode","upcased","toUpperCase","normalizeMethod","referrer","form","parseHeaders","rawHeaders","line","bodyInit","clone","redirectStatuses","redirect","RangeError","create","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","withCredentials","setRequestHeader","onreadystatechange","polyfill","ponyfill","ctx","module","naiveFallback","__global__","_globalThis","require","NativeWebSocket","WebSocket","MozWebSocket","websocket_version","W3CWebSocket","uri","protocols","prop"],"sourceRoot":""}