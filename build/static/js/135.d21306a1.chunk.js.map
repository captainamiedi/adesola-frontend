{"version":3,"file":"static/js/135.d21306a1.chunk.js","mappings":"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","sources":["components/Message.jsx","components/ChatInput.jsx","components/ChatUI.jsx","components/ChatMode.jsx","Pages/Chat.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nconst Message = ({ message, formatMessageContent, chatText }) => {\r\n  return (\r\n    <div\r\n      className={`message ${\r\n        message.role === \"user\" ? \"user\" : \"assistant\"\r\n      }`}\r\n      dangerouslySetInnerHTML={{\r\n        __html: formatMessageContent(message.content),\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\n\r\n// import send icon from react-icons/fa\r\nimport { FaPaperPlane } from \"react-icons/fa\";\r\n\r\n\r\nconst ChatInput = ({ inputMessage, setInputMessage, sendMessage, mode, handleFileChange, sendFile, file, type }) => {\r\n  return (\r\n    <div className=\"chat-input\">\r\n      {(mode === 'lawChat' || (mode === 'Q/A' && type ==='answer')) && <textarea\r\n        placeholder=\"Type a message\"\r\n        value={inputMessage}\r\n        onChange={(e) => setInputMessage(e.target.value)}\r\n        onKeyDown={(e) => {\r\n          if (e.key === \"Enter\" && !e.shiftKey) {\r\n            e.preventDefault();\r\n            if (inputMessage) {\r\n              sendMessage();\r\n            }\r\n          }          \r\n        }}\r\n      />}\r\n      {fileMode.includes(mode) && type !== 'answer' && <input \r\n        type=\"file\" \r\n        onChange={handleFileChange}  \r\n        onKeyDown={(e) => {\r\n          if (e.key === 'Enter' && !e.shiftKey) {\r\n            e.preventDefault()\r\n            if (file) {\r\n              sendFile()\r\n            }\r\n          }\r\n        }}\r\n      />}\r\n\r\n      {mode !== 'Q/A'&& type !== 'answer' && <button onClick={sendMessage} disabled={(mode ==='lawChat' && !inputMessage) || (mode !== 'lawChat' &&!file) || (mode === 'Q/A' && !inputMessage)}>\r\n        <FaPaperPlane/>\r\n      </button>}\r\n      {mode === 'Q/A' && <button onClick={sendMessage} disabled={(type === 'question' && !file) || (type === 'answer' && !inputMessage)}>\r\n        <FaPaperPlane/>\r\n      </button>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInput;\r\n\r\nconst fileMode = ['Q/A', 'audio', 'summarizeDoc', 'question']","import React from \"react\";\r\nimport Message from \"./Message\";\r\nimport ChatInput from \"./ChatInput\";\r\n\r\nconst ChatUI = ({\r\n  messages,\r\n  inputMessage,\r\n  setInputMessage,\r\n  sendMessage,\r\n  formatMessageContent,\r\n  isAssistantTyping,\r\n  messagesEndRef,\r\n  chatText,\r\n  mode,\r\n  file,\r\n  handleFileChange,\r\n  sendFile,\r\n  type\r\n}) => {\r\n  return (\r\n    <div className=\"chat-ui\">\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message, index) => (\r\n          <Message\r\n            key={index}\r\n            message={message}\r\n            formatMessageContent={formatMessageContent}\r\n            chatText={chatText}\r\n          />\r\n        ))}\r\n        {isAssistantTyping && (\r\n          <div className=\"message assistant\">\r\n            <div className=\"typing-indicator\">\r\n              <span className=\"dot\"></span>\r\n              <span className=\"dot\"></span>\r\n              <span className=\"dot\"></span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={messagesEndRef}></div>\r\n      </div>\r\n      <ChatInput\r\n        inputMessage={inputMessage}\r\n        setInputMessage={setInputMessage}\r\n        sendMessage={sendMessage}\r\n        mode={mode}\r\n        file={file}\r\n        sendFile={sendFile}\r\n        handleFileChange={handleFileChange}\r\n        type={type}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatUI;","import React from 'react'\r\n\r\nexport default function ChatMode({ setMode, mode, setType }) {\r\n  const handleChange = (e) => {\r\n    setMode(e.target.value)\r\n    setType('question')\r\n  }\r\n  return (\r\n    <div className='chat-mode-sub-container'>\r\n    <div className=\"select-wrapper\">\r\n    <label for=\"select-choice\">Chat Mode:</label>\r\n    <div className=\"styled-select\" for=\"select-choice\">\r\n      <select name=\"select-choice\" id=\"select-choice\" onChange={handleChange}>\r\n        <option value=\"lawChat\">Law Chat</option>\r\n        <option value=\"summarizeDoc\">Summarize Document</option>\r\n        <option value=\"audio\">Translate Audio</option>\r\n        <option value=\"question\">Question</option>\r\n        <option value=\"Q/A\">Q/A Document</option>\r\n      </select>\r\n    </div>\r\n    \r\n  </div>\r\n    {/* {mode === 'Q/A' && <div className=\"select-wrapper type\">\r\n    <label for=\"select-choice\">Type:</label>\r\n    <div className=\"styled-select\" for=\"select-choice\">\r\n      <select name=\"select-choice\" id=\"select-choice\" onChange={(e) => setType(e.target.value)}>\r\n        <option value=\"question\">Questions</option>\r\n        <option value=\"answer\">Answers</option>\r\n      </select>\r\n    </div>\r\n    \r\n  </div>} */}\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FaGithub } from \"react-icons/fa\";\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nimport ChatHistory from \"../components/ChatHistory\";\r\nimport ChatUI from \"../components/ChatUI\";\r\nimport ChatMode from \"../components/ChatMode\";\r\n\r\nconst supabaseClient = createClient(process.env.REACT_APP_Project_URL, process.env.REACT_APP_Public_Anon_Key)\r\n\r\nconst baseURL = process.env.REACT_APP_BACKEND_URL || \"http://localhost:8080/\";\r\n\r\nfunction Chat() {\r\n  const [chats, setChats] = useState([]);\r\n  const [selectedChatId, setSelectedChatId] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const messagesEndRef = useRef(null);\r\n  const [isAssistantTyping, setIsAssistantTyping] = useState(false);\r\n  const [chatResponse, setChatResponse] = useState('')\r\n  const [mode, setMode] = useState('lawChat')\r\n  const [type, setType] = useState('question')\r\n  const [file, setFile] = useState(null)\r\n\r\n  // useEffect(() => {\r\n  //   fetchChats();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (selectedChatId) {\r\n  //     fetchMessages(selectedChatId);\r\n  //   } else {\r\n  //     setMessages([]);\r\n  //   }\r\n  // }, [selectedChatId]);\r\n\r\n  useEffect(() => {\r\n    if (file) {\r\n\r\n      var reader = new FileReader()\r\n      reader.onload = function(event) {\r\n        const fileContent = event.target.result;\r\n        // console.log(fileContent, 'file content');\r\n        localStorage.setItem('storedFile', fileContent);\r\n        localStorage.setItem('storedFileName', file.name)\r\n      }\r\n      reader.readAsDataURL(file);\r\n    }\r\n  },  [file])\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const scrollToBottom = () => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: \"auto\" });\r\n    }\r\n  };\r\n\r\n  const fetchChats = async () => {\r\n    try {\r\n      const response = await axios.get(`${baseURL}/chats/`);\r\n      setChats(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching chats:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchMessages = async (chatId) => {\r\n    try {\r\n      const response = await axios.get(`${baseURL}/chats/${chatId}/`);\r\n      setMessages(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching messages:\", error);\r\n    }\r\n  };\r\n\r\n  // console.log(file, 'file');\r\n\r\n  const sendFile =async () => {\r\n\r\n    const storedFile = localStorage.getItem('storedFile');\r\n    const storedFileName = localStorage.getItem('storedFileName')\r\n    const base64WithoutPrefix = storedFile.replace(/^data:[^;]+;base64,/, '');\r\n    const byteCharacters = atob(base64WithoutPrefix);\r\n    const byteArrays = [];\r\n    for (let i = 0; i < byteCharacters.length; i++) {\r\n      byteArrays.push(byteCharacters.charCodeAt(i));\r\n    }\r\n    const byteArray = new Uint8Array(byteArrays);\r\n    const blob = new Blob([byteArray], { type: 'application/pdf' });\r\n\r\n    // Create a file from the Blob\r\n    const file = new File([blob], storedFileName, { type: 'application/pdf' });\r\n\r\n    if (type === 'answer') {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          content: inputMessage,\r\n          role: \"user\",\r\n        },\r\n      ]);\r\n    } else {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          content: storedFileName,\r\n          role: \"user\",\r\n        },\r\n      ]);\r\n\r\n    }\r\n    const config = {\r\n      headers:{\r\n        'Authorization': localStorage.getItem('userToken'),\r\n      }\r\n    }\r\n  \r\n    let formData = new FormData()\r\n    formData.append('file', file)\r\n    setIsAssistantTyping(true);\r\n    if (mode === 'audio') {\r\n      const response = await axios.post(`${baseURL}api/upload_media/`, formData, config)\r\n      const payload = {\r\n        role: 'assistant',\r\n        content: response.data.data\r\n      }\r\n\r\n      setMessages(prev => [...prev, payload])\r\n      \r\n      setIsAssistantTyping(false);\r\n      setFile(null)\r\n    }\r\n    if (mode === 'summarizeDoc') {\r\n      const response = await axios.post(`${baseURL}api/upload_file/`, formData, config)\r\n      const payload = {\r\n        role: 'assistant',\r\n        content: response.data.data.output_text\r\n      }\r\n      console.log(response.data.data);\r\n      setMessages(prev => [...prev, payload])\r\n      \r\n      setIsAssistantTyping(false);\r\n      setFile(null)\r\n      \r\n    }\r\n    if (mode === 'question') {\r\n      try {\r\n        formData.append('type', 'question')\r\n        // if (type === 'answer') {\r\n        //   formData.append('question', inputMessage)\r\n        // }\r\n        const response = await axios.post(`${baseURL}api/question_answer`, formData, config)\r\n        const payload = {\r\n          role: 'assistant',\r\n          content: response.data.data\r\n        }\r\n        if (type === 'answer') {\r\n          payload.content = response.data.data.data.answer\r\n        }\r\n\r\n        setMessages(prev => [...prev, payload])\r\n        \r\n        setIsAssistantTyping(false);\r\n        setFile(null)\r\n      } \r\n      catch (error) {\r\n        \r\n      }\r\n    }\r\n    if (mode === 'Q/A') {\r\n      try {\r\n        if (type === 'answer') {\r\n          formData.append('question', inputMessage)\r\n          const response  = await axios.post(`${baseURL}api/query/doc`, formData, {\r\n            headers: {\r\n              'Authorization': localStorage.getItem('userToken'),\r\n            }\r\n          })\r\n\r\n          const payload = {\r\n            role: 'assistant',\r\n            content: response.data.data.answer + response.data.data.sources\r\n          }\r\n          setMessages(prev => [...prev, payload])\r\n          setIsAssistantTyping(false);\r\n          // setFile(null)\r\n          return response.data\r\n        }\r\n        // console.log(localStorage.getItem('userToken'));\r\n        const response =await fetch(`${baseURL}api/embedding/doc`, {\r\n          method: 'POST',\r\n          // mode: \"cors\", // no-cors, *cors, same-origin\r\n          // cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n          // credentials: \"same-origin\", // include, *same-origin, omit\r\n          headers: {\r\n            // \"Content-Type\": \"application/json\",\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            'Authorization': localStorage.getItem('userToken')\r\n          },\r\n          body: formData\r\n        })\r\n        alert('upload successful. you can start asking Adesola questions based on the document uploaded.')\r\n        // setMessages(prev => [...prev, payload])\r\n        \r\n        setIsAssistantTyping(false);\r\n        setFile(null)\r\n        setType('answer')\r\n      } \r\n      catch (error) {\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  const sendMessage = async () => {\r\n    // Update the local state before sending the message to the backend\r\n    setMessages([\r\n      ...messages,\r\n      {\r\n        content: inputMessage,\r\n        role: \"user\",\r\n      },\r\n    ]);\r\n    setInputMessage(\"\");\r\n    if (['summarizeDoc', 'audio', 'Q/A'].includes(mode)) {\r\n      return sendFile()\r\n    }\r\n\r\n    setIsAssistantTyping(true);\r\n    if (type !== 'answer') {\r\n        try {\r\n          // Simulate a delay for the typewriting effect\r\n          const delay = 1000 + Math.random() * 1000; // Random delay between 1-2 seconds\r\n          // setTimeout(async () => {\r\n            try {\r\n              const { data, error } = await supabaseClient.functions.invoke('law-custom-data', {\r\n                body: JSON.stringify({ query: inputMessage}),\r\n              })\r\n              // const response = await axios.post(`${baseURL}/chats/`, {\r\n              //   chat_id: selectedChatId || undefined,\r\n              //   message: inputMessage,\r\n              // });\r\n              // console.log(data.text);\r\n              setChatResponse(data.text)\r\n              const payload = {\r\n                role: 'assistant',\r\n                content: data.text\r\n              }\r\n              setMessages(prev => [...prev, payload])\r\n              // setMessages()\r\n              // If there was no selected chat, set the selected chat to the newly created one\r\n              if (!selectedChatId) {\r\n                setSelectedChatId(data.id);\r\n                setChats([{ id: data.id }, ...chats]);\r\n              } else {\r\n                // fetchMessages(selectedChatId);\r\n              }\r\n            } catch (error) {\r\n              console.error(\"Error sending message:\", error);\r\n              setMessages([\r\n                ...messages,\r\n                {\r\n                  content:\r\n                    \"⚠️ An error occurred while sending the message. Please make sure the backend is running and OPENAI_API_KEY is set in the .env file.\",\r\n                  role: \"assistant\",\r\n                },\r\n              ]);\r\n            } finally {\r\n              setIsAssistantTyping(false);\r\n            }\r\n          // }, delay);\r\n        } catch (error) {\r\n          console.error(\"Error sending message:\", error);\r\n        }\r\n    }else {\r\n\r\n    }\r\n  };\r\n\r\n  const createNewChat = async () => {\r\n    try {\r\n      const response = await axios.post(`${baseURL}/chats/`);\r\n      const newChat = response.data;\r\n\r\n      setChats([newChat, ...chats]);\r\n      setSelectedChatId(newChat.id);\r\n    } catch (error) {\r\n      console.error(\"Error creating a new chat:\", error);\r\n    }\r\n  };\r\n\r\n  function formatMessageContent(content) {\r\n    const sections = content.split(/(```[\\s\\S]*?```|`[\\s\\S]*?`)/g);\r\n    return sections\r\n      .map((section) => {\r\n        if (section.startsWith(\"```\") && section.endsWith(\"```\")) {\r\n          section = section.split(\"\\n\").slice(1).join(\"\\n\");\r\n          const code = section.substring(0, section.length - 3);\r\n          return `<pre><code class=\"code-block\">${code}</code></pre>`;\r\n        } else if (section.startsWith(\"`\") && section.endsWith(\"`\")) {\r\n          const code = section.substring(1, section.length - 1);\r\n          return `<code class=\"inline-code\">${code}</code>`;\r\n        } else {\r\n          return section.replace(/\\n/g, \"<br>\");\r\n        }\r\n      })\r\n      .join(\"\");\r\n  }\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    setFile(file)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"headline\">\r\n        <h1>⚡ Adesola Chat ⚡</h1>\r\n      </div>\r\n      <div className=\"chat-container\">\r\n        {/* <div className=\"chat-history-container\">\r\n          <button className=\"new-chat-button\" onClick={createNewChat}>\r\n            <strong>+ New Chat</strong>\r\n          </button>\r\n          <ChatHistory\r\n            chats={chats}\r\n            selectedChatId={selectedChatId}\r\n            setSelectedChatId={setSelectedChatId}\r\n          />\r\n        </div> */}\r\n        <ChatUI\r\n          messages={messages}\r\n          inputMessage={inputMessage}\r\n          setInputMessage={setInputMessage}\r\n          sendMessage={sendMessage}\r\n          formatMessageContent={formatMessageContent}\r\n          isAssistantTyping={isAssistantTyping}\r\n          messagesEndRef={messagesEndRef}\r\n          chatText={chatResponse}\r\n          mode={mode}\r\n          file={file}\r\n          handleFileChange={handleFileChange}\r\n          sendFile={sendFile}\r\n          type={type}\r\n        />\r\n        <div className=\"chat-option-container\">\r\n          <ChatMode setMode={setMode} mode={mode} setType={setType} />\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"footer\">\r\n        <a\r\n          href=\"https://github.com/fatihbaltaci/chatgpt-clone\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <FaGithub className=\"icon\" />\r\n          View on GitHub\r\n        </a>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;"],"names":["_ref","message","formatMessageContent","chatText","_jsx","className","concat","role","dangerouslySetInnerHTML","__html","content","inputMessage","setInputMessage","sendMessage","mode","handleFileChange","sendFile","file","type","_jsxs","children","placeholder","value","onChange","e","target","onKeyDown","key","shiftKey","preventDefault","fileMode","includes","onClick","disabled","FaPaperPlane","messages","isAssistantTyping","messagesEndRef","map","index","Message","ref","ChatInput","ChatMode","setMode","setType","for","name","id","supabaseClient","createClient","process","baseURL","_useState","useState","_useState2","_slicedToArray","chats","setChats","_useState3","_useState4","selectedChatId","setSelectedChatId","_useState5","_useState6","setMessages","_useState7","_useState8","useRef","_useState9","_useState10","setIsAssistantTyping","_useState11","_useState12","chatResponse","setChatResponse","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","setFile","useEffect","reader","FileReader","onload","event","fileContent","result","localStorage","setItem","readAsDataURL","scrollToBottom","current","scrollIntoView","behavior","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","storedFile","storedFileName","base64WithoutPrefix","byteCharacters","byteArrays","i","byteArray","blob","config","formData","response","payload","_response","_payload","_response2","_payload2","_response3","_payload3","wrap","_context3","prev","next","getItem","replace","atob","length","push","charCodeAt","Uint8Array","Blob","File","_toConsumableArray","headers","FormData","append","axios","post","sent","data","output_text","console","log","answer","t0","sources","abrupt","fetch","method","body","alert","t1","stop","apply","arguments","_ref4","_callee4","_yield$supabaseClient","_context4","Math","random","functions","invoke","JSON","stringify","query","error","text","finish","ChatUI","split","section","startsWith","endsWith","code","slice","join","substring","files"],"sourceRoot":""}